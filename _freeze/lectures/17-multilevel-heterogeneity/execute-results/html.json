{
  "hash": "163e93781ee388dc5269e560eee89a53",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Bayesian multilevel modeling in the wild: Beyond homogeneity\"\nsubtitle: \"<br>36-460/660<br><br>March 25, 2025\"\nformat:\n  revealjs:\n    theme: theme.scss\n    chalkboard: true\n    smaller: true\n    slide-number: c/t\n    code-line-numbers: false\n    code-fold: true\n    linestretch: 1.25\n    html-math-method:\n      method: mathjax\n      url: \"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"\n---\n\n\n\n\n## Agenda\n\nWhat have you seen so far?\n\n* Multilevel models\n\n* Bayesian statistics\n\n. . .\n\nToday\n\n* Multilevel modeling with variance heterogeneity\n\n* `brms` package\n\n* Note: Demo materials are within these slides (not in a separate file as usual)\n\n. . .\n\nKey takeaways\n\n* The process of developing a model\n\n* A real application of multilevel modeling and Bayesian inference\n\n  * Hopefully you'll find this useful (e.g., for future projects)\n\n# Motivating example\n\n## Snap timing in American football\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](17-multilevel-heterogeneity_files/figure-revealjs/unnamed-chunk-2-1.png){width=960}\n:::\n:::\n\n\n\n## Snap timing in American football\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](17-multilevel-heterogeneity_files/figure-revealjs/unnamed-chunk-3-1.png){width=960}\n:::\n:::\n\n\n\n## Defining snap timing: $\\ \\ \\ \\small \\delta_i = t_i^{\\text{snap}}-t_i^{\\text{motion}}$\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](17-multilevel-heterogeneity_files/figure-revealjs/unnamed-chunk-4-1.png){width=960}\n:::\n:::\n\n\n\n## Example play\n\n<center>\n\n![](https://raw.githubusercontent.com/qntkhvn/timing/refs/heads/main/figures/kelce_motion_full.gif){width=\"58%\"}\n\n</center>\n\n## Why do we care about snap timing?\n\n* Our main quantity of interest is the **variability** in snap timing\n\n  * Across different plays, the offense does not snap the ball at the same time after a receiver goes in motion\n  \n. . .\n\n* QB skill: synchronizing the snap with motion\n\n. . .\n\n* If the snap timing is consistent/predictable, defenders can anticipate the snap and time their actions to disrupt the play\n\n. . .\n\n* Higher variability in snap timing can be beneficial — prevents defenses from predicting when the snap will occur\n\n## Data\n\n* Play-level information (each row is a play, with various attributes, including the snap timing `frame_between`)\n\n* Summarized from player tracking data provided by the [NFL Big Data Bowl 2025](https://www.kaggle.com/competitions/nfl-big-data-bowl-2025) (first 9 weeks of the 2022 NFL season)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\ntheme_set(theme_light(base_size = 15))\nplays_snap_timing <- read_csv(\"https://github.com/qntkhvn/timing/raw/refs/heads/main/scripts/plays_snap_timing_demo.csv.gz\")\nglimpse(plays_snap_timing)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```{style='font-size: 0.75em;'}\nRows: 2,253\nColumns: 13\n$ gameId                     <dbl> 2022090800, 2022090800, 2022090800, 2022090…\n$ playId                     <dbl> 212, 236, 438, 550, 569, 617, 818, 1030, 22…\n$ nflId                      <dbl> 47879, 52536, 53678, 42489, 42489, 44985, 4…\n$ passer_player_id           <chr> \"00-0034857\", \"00-0034857\", \"00-0026498\", \"…\n$ passer_player_name         <chr> \"J.Allen\", \"J.Allen\", \"M.Stafford\", \"J.Alle…\n$ defensiveTeam              <chr> \"LA\", \"LA\", \"BUF\", \"LA\", \"LA\", \"LA\", \"BUF\",…\n$ frame_between              <dbl> 9, 9, 7, 9, 25, 9, 16, 27, 2, 2, 3, 15, 15,…\n$ down                       <dbl> 2, 3, 1, 2, 3, 1, 3, 3, 2, 1, 1, 2, 2, 3, 2…\n$ play_clock_at_motion       <dbl> 10.9, 9.9, 15.7, 8.9, 9.5, 9.9, 16.6, 8.7, …\n$ posteam_timeouts_remaining <dbl> 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3…\n$ position                   <chr> \"TE\", \"WR\", \"WR\", \"WR\", \"WR\", \"WR\", \"B\", \"W…\n$ n_motion_since_line_set    <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ motion_cluster             <dbl> 1, 3, 1, 3, 1, 1, 2, 1, 2, 1, 1, 1, 4, 4, 2…\n```\n\n\n:::\n:::\n\n\n\n\n# Multilevel modeling with variance heterogeneity\n\n## Modeling the play-level snap timing with a ??? distribution\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplays_snap_timing |> \n  ggplot(aes(frame_between)) +\n  geom_histogram(bins = 40, fill = \"gray90\", color = \"gray30\") +\n  labs(x = \"Frames between motion and ball snap\",\n       y = \"Frequency\")\n```\n\n::: {.cell-output-display}\n![](17-multilevel-heterogeneity_files/figure-revealjs/unnamed-chunk-6-1.png){fig-align='center' width=768}\n:::\n:::\n\n\n\n## Modeling the play-level snap timing with a Gamma distribution: $\\ \\ \\ \\small \\delta_i \\sim \\textsf{Gamma}(\\mu_i, \\alpha_i)$\n\n* Parameterized by mean $\\mu$ and shape $\\alpha > 0$ $$f_Y(y; \\mu, \\alpha) = \\frac{(\\alpha / \\mu)^\\alpha}{\\Gamma(\\alpha)} y^{\\alpha-1} \\exp\\left(-\\frac{\\alpha y}{\\mu}\\right), \\quad y \\ge 0$$ for which $\\mathbb E(Y)=\\mu$ and $\\textsf{Var}(Y)=\\mu^2 / \\alpha$\n\n* Gamma regression is a distributional regression (modeling overall shape of distribution)\n\n* Fit separate models for both parameters $\\mu$ and $\\alpha$ and see how the overall distribution shifts based on different covariates\n\n## From usual to alternative parameterization\n\n* Recall the usual parameterization of a Gamma distribution with 2 parameters<br>shape $\\alpha > 0$ and scale $\\theta > 0$\n\n$$\n\\begin{aligned}\nY &\\sim \\textsf{Gamma}(\\alpha, \\theta)\\\\\nf_Y(y; \\alpha, \\theta) &= \\frac{1}{\\Gamma(\\alpha) \\theta^ \\alpha}y^{\\alpha-1}\\exp\\left(-\\frac{y}{\\theta}\\right)\n\\end{aligned}\n$$\nwith $\\mathbb E(Y) =\\mu = \\alpha \\theta$ and $\\textsf{Var}(Y) = \\alpha \\theta^2$\n\n* Therefore, to reparameterize, simply set $\\theta = \\mu / \\alpha$\n\n* (Another example: [Beta regression](https://www.andrewheiss.com/blog/2021/11/08/beta-regression-guide/))\n\n## Modeling the mean parameter with covariates + player and team random effects\n\n$$\n\\begin{aligned}\n\\log\\mu_i&=\\gamma_0+\\boldsymbol{\\beta X_i}+b_{q[i]}+b_{m[i]}+b_{d[i]}\\\\\nb_q&\\sim\\textsf{Normal}(0,\\sigma^2_q)\\\\\nb_m&\\sim\\textsf{Normal}(0,\\sigma^2_m)\\\\\nb_d&\\sim\\textsf{Normal}(0,\\sigma^2_d)\\\\\n\\end{aligned}\n$$\n\n$$\n\\begin{aligned}\n\\\\\n\\boldsymbol X = \n\\small\n\\{ &\\text{down},\\\\\n& \\text{play clock at motion},\\\\\n& \\text{timeouts remaining (offense)},\\\\\n& \\text{motion players since lineset},\\\\\n& \\text{position},\\\\\n& \\textcolor{blue}{\\text{motion type}} \\}\\\\\n\\end{aligned}\n$$\n\n## Modeling the shape parameter with random intercept for QB\n\n$$\n\\begin{aligned}\n\\log\\alpha_i&=\\psi_0+u_{q[i]}\\\\\nu_q&\\sim\\textsf{Normal}(0,\\tau^2_q)\\\\\n\\end{aligned}\n$$\n\n* Recall that the shape parameter $\\alpha$ is proportional to the variance of a Gamma distribution\n\n* This allows us to estimate the differences in snap timing variability among NFL quarterbacks\n\n\n## Full model\n\n* Implemented in a Bayesian framework\n\n* Uncertainty quantification for all model parameters with posterior distributions\n\n::: columns\n\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n\n$$\n\\begin{aligned}\n\\delta_i&\\sim\\textsf{Gamma}(\\mu_i,\\alpha_i)\\\\\n\\\\\n\\log\\mu_i&=\\gamma_0+\\boldsymbol{\\beta X_i}+b_{q[i]}+b_{m[i]}+b_{d[i]}\\\\\nb_q&\\sim\\textsf{Normal}(0,\\sigma^2_q)\\\\\nb_m&\\sim\\textsf{Normal}(0,\\sigma^2_m)\\\\\nb_d&\\sim\\textsf{Normal}(0,\\sigma^2_d)\\\\\n\\\\\n\\log\\alpha_i&=\\psi_0+u_{q[i]}\\\\\nu_q&\\sim\\textsf{Normal}(0,\\tau^2_q)\\\\\n\\end{aligned}\n$$\n\n:::\n\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n\n$$\n\\begin{aligned}\n\\\\\n\\\\\n\\\\\n\\sigma_q &\\sim \\textsf{half-}t_3\\\\\n\\sigma_m &\\sim \\textsf{half-}t_3\\\\\n\\sigma_d &\\sim \\textsf{half-}t_3\\\\\n\\\\\n\\\\\n\\\\\n\\tau_q &\\sim \\textsf{half-}t_3\\\\\n\\end{aligned}\n$$\n\n:::\n\n:::\n\n\n# Model fitting with `brms` package\n\n## What is `brms`?\n\n::: columns\n\n::: {.column width=\"40%\" style=\"text-align: left;\"}\n\n* Interface to `Stan`\n\n* `lme4`-like formula syntax \n\n* This means you don't have to write actual `Stan` programs\n\n* Supports a [wide range of models](https://rdrr.io/cran/brms/man/brmsfamily.html)\n\n* Website: [`paulbuerkner.com/brms`](https://paulbuerkner.com/brms/)\n\n:::\n\n::: {.column width=\"60%\" style=\"text-align: left;\"}\n\n<center>\n\n![](https://figures.semanticscholar.org/4bf0e9786d6638dc7d4b1fc929def68da9003c4e/6-Figure1-1.png){width=\"67%\"}\n\n</center>\n\n\n\n:::\n\n:::\n\n\n<!-- ::: {.callout-note title=\"From the package description\" collapse=\"true\"} -->\n<!-- > A wide range of distributions and link functions are supported, allowing users to fit – among others – linear, robust linear, count data, survival, response times, ordinal, zero-inflated, hurdle, and even self-defined mixture models all in a multilevel context. Further modeling options include both theory-driven and data-driven non-linear terms, auto-correlation structures, censoring and truncation, meta-analytic standard errors, and quite a few more. In addition, all parameters of the response distribution can be predicted in order to perform distributional regression. -->\n<!-- ::: -->\n\n\n\n## `brms` syntax\n\n::: {.panel-tabset}\n\n### `lme4` version\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n# data from previous demo\n# https://ryurko.github.io/cmu-sportsanalytics-spring25/demos/09-random-effects-uncertainty.html\nlibrary(lme4)\nnfl_passing_glmer <- glmer(complete_pass ~ air_yards + (1 | passer_name_id) + \n                             (1 | receiver_name_id) + (1 | defteam),\n                           family = binomial, \n                           data = nfl_passing_data)\n```\n:::\n\n\n\n### `brms` version\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nlibrary(brms)\nnfl_passing_brm <- brm(complete_pass ~ air_yards + (1 | passer_name_id) + \n                         (1 | receiver_name_id) + (1 | defteam),\n                       family = bernoulli, \n                       data = nfl_passing_data,\n                       iter = 5000,\n                       warmup = 2500,\n                       chains = 4,\n                       cores = 4,\n                       backend = \"cmdstanr\",\n                       seed = 3)\n```\n:::\n\n\n\nRecommendation:\n\n* Use the `cmdstanr` backend for `Stan` (instead of the default `rstan`)\n* First install `cmdstanr` (see [this link](https://mc-stan.org/cmdstanr)) and then run `cmdstanr::install_cmdstan()`\n\n:::\n\n\n## Fitting multilevel model for snap timing\n\n* Need to specify model formula both for mean and shape parameter<br>(use `brmsformula()` or `bf()`)\n\n<!-- * Use 4 parallel chains, each with 5,000 iterations (2,500 warmup draws) -->\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(brms)\nsnap_timing_brm <- brm(\n  brmsformula(\n    # mean level\n    frame_between ~ \n      factor(down) + play_clock_at_motion + factor(posteam_timeouts_remaining) + \n      position + n_motion_since_line_set + factor(motion_cluster) + \n      (1 | passer_player_id) + (1 | nflId) + (1 | defensiveTeam),\n    # shape level\n    shape ~ (1 | passer_player_id)\n  ),\n  family = Gamma(link = \"log\"),\n  data = plays_snap_timing,\n  iter = 5000,\n  warmup = 2500,\n  chains = 4,\n  seed = 3,\n  cores = 4,\n  backend = \"cmdstanr\"\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```{style='font-size: 0.67em;'}\nRunning MCMC with 4 parallel chains...\n\nChain 4 Iteration:    1 / 5000 [  0%]  (Warmup) \nChain 1 Iteration:    1 / 5000 [  0%]  (Warmup) \nChain 2 Iteration:    1 / 5000 [  0%]  (Warmup) \nChain 3 Iteration:    1 / 5000 [  0%]  (Warmup) \nChain 2 Iteration:  100 / 5000 [  2%]  (Warmup) \nChain 2 Iteration:  200 / 5000 [  4%]  (Warmup) \nChain 1 Iteration:  100 / 5000 [  2%]  (Warmup) \nChain 2 Iteration:  300 / 5000 [  6%]  (Warmup) \nChain 4 Iteration:  100 / 5000 [  2%]  (Warmup) \nChain 1 Iteration:  200 / 5000 [  4%]  (Warmup) \nChain 2 Iteration:  400 / 5000 [  8%]  (Warmup) \nChain 3 Iteration:  100 / 5000 [  2%]  (Warmup) \nChain 1 Iteration:  300 / 5000 [  6%]  (Warmup) \nChain 2 Iteration:  500 / 5000 [ 10%]  (Warmup) \nChain 4 Iteration:  200 / 5000 [  4%]  (Warmup) \nChain 3 Iteration:  200 / 5000 [  4%]  (Warmup) \nChain 1 Iteration:  400 / 5000 [  8%]  (Warmup) \nChain 2 Iteration:  600 / 5000 [ 12%]  (Warmup) \nChain 4 Iteration:  300 / 5000 [  6%]  (Warmup) \nChain 3 Iteration:  300 / 5000 [  6%]  (Warmup) \nChain 1 Iteration:  500 / 5000 [ 10%]  (Warmup) \nChain 2 Iteration:  700 / 5000 [ 14%]  (Warmup) \nChain 4 Iteration:  400 / 5000 [  8%]  (Warmup) \nChain 3 Iteration:  400 / 5000 [  8%]  (Warmup) \nChain 1 Iteration:  600 / 5000 [ 12%]  (Warmup) \nChain 2 Iteration:  800 / 5000 [ 16%]  (Warmup) \nChain 4 Iteration:  500 / 5000 [ 10%]  (Warmup) \nChain 3 Iteration:  500 / 5000 [ 10%]  (Warmup) \nChain 1 Iteration:  700 / 5000 [ 14%]  (Warmup) \nChain 4 Iteration:  600 / 5000 [ 12%]  (Warmup) \nChain 2 Iteration:  900 / 5000 [ 18%]  (Warmup) \nChain 1 Iteration:  800 / 5000 [ 16%]  (Warmup) \nChain 3 Iteration:  600 / 5000 [ 12%]  (Warmup) \nChain 4 Iteration:  700 / 5000 [ 14%]  (Warmup) \nChain 2 Iteration: 1000 / 5000 [ 20%]  (Warmup) \nChain 4 Iteration:  800 / 5000 [ 16%]  (Warmup) \nChain 1 Iteration:  900 / 5000 [ 18%]  (Warmup) \nChain 3 Iteration:  700 / 5000 [ 14%]  (Warmup) \nChain 2 Iteration: 1100 / 5000 [ 22%]  (Warmup) \nChain 3 Iteration:  800 / 5000 [ 16%]  (Warmup) \nChain 4 Iteration:  900 / 5000 [ 18%]  (Warmup) \nChain 1 Iteration: 1000 / 5000 [ 20%]  (Warmup) \nChain 2 Iteration: 1200 / 5000 [ 24%]  (Warmup) \nChain 3 Iteration:  900 / 5000 [ 18%]  (Warmup) \nChain 4 Iteration: 1000 / 5000 [ 20%]  (Warmup) \nChain 1 Iteration: 1100 / 5000 [ 22%]  (Warmup) \nChain 2 Iteration: 1300 / 5000 [ 26%]  (Warmup) \nChain 4 Iteration: 1100 / 5000 [ 22%]  (Warmup) \nChain 3 Iteration: 1000 / 5000 [ 20%]  (Warmup) \nChain 1 Iteration: 1200 / 5000 [ 24%]  (Warmup) \nChain 2 Iteration: 1400 / 5000 [ 28%]  (Warmup) \nChain 4 Iteration: 1200 / 5000 [ 24%]  (Warmup) \nChain 1 Iteration: 1300 / 5000 [ 26%]  (Warmup) \nChain 3 Iteration: 1100 / 5000 [ 22%]  (Warmup) \nChain 2 Iteration: 1500 / 5000 [ 30%]  (Warmup) \nChain 4 Iteration: 1300 / 5000 [ 26%]  (Warmup) \nChain 1 Iteration: 1400 / 5000 [ 28%]  (Warmup) \nChain 3 Iteration: 1200 / 5000 [ 24%]  (Warmup) \nChain 2 Iteration: 1600 / 5000 [ 32%]  (Warmup) \nChain 4 Iteration: 1400 / 5000 [ 28%]  (Warmup) \nChain 1 Iteration: 1500 / 5000 [ 30%]  (Warmup) \nChain 3 Iteration: 1300 / 5000 [ 26%]  (Warmup) \nChain 2 Iteration: 1700 / 5000 [ 34%]  (Warmup) \nChain 4 Iteration: 1500 / 5000 [ 30%]  (Warmup) \nChain 1 Iteration: 1600 / 5000 [ 32%]  (Warmup) \nChain 3 Iteration: 1400 / 5000 [ 28%]  (Warmup) \nChain 4 Iteration: 1600 / 5000 [ 32%]  (Warmup) \nChain 2 Iteration: 1800 / 5000 [ 36%]  (Warmup) \nChain 1 Iteration: 1700 / 5000 [ 34%]  (Warmup) \nChain 3 Iteration: 1500 / 5000 [ 30%]  (Warmup) \nChain 4 Iteration: 1700 / 5000 [ 34%]  (Warmup) \nChain 2 Iteration: 1900 / 5000 [ 38%]  (Warmup) \nChain 1 Iteration: 1800 / 5000 [ 36%]  (Warmup) \nChain 4 Iteration: 1800 / 5000 [ 36%]  (Warmup) \nChain 3 Iteration: 1600 / 5000 [ 32%]  (Warmup) \nChain 2 Iteration: 2000 / 5000 [ 40%]  (Warmup) \nChain 4 Iteration: 1900 / 5000 [ 38%]  (Warmup) \nChain 1 Iteration: 1900 / 5000 [ 38%]  (Warmup) \nChain 3 Iteration: 1700 / 5000 [ 34%]  (Warmup) \nChain 2 Iteration: 2100 / 5000 [ 42%]  (Warmup) \nChain 4 Iteration: 2000 / 5000 [ 40%]  (Warmup) \nChain 1 Iteration: 2000 / 5000 [ 40%]  (Warmup) \nChain 3 Iteration: 1800 / 5000 [ 36%]  (Warmup) \nChain 2 Iteration: 2200 / 5000 [ 44%]  (Warmup) \nChain 4 Iteration: 2100 / 5000 [ 42%]  (Warmup) \nChain 1 Iteration: 2100 / 5000 [ 42%]  (Warmup) \nChain 3 Iteration: 1900 / 5000 [ 38%]  (Warmup) \nChain 2 Iteration: 2300 / 5000 [ 46%]  (Warmup) \nChain 4 Iteration: 2200 / 5000 [ 44%]  (Warmup) \nChain 1 Iteration: 2200 / 5000 [ 44%]  (Warmup) \nChain 3 Iteration: 2000 / 5000 [ 40%]  (Warmup) \nChain 2 Iteration: 2400 / 5000 [ 48%]  (Warmup) \nChain 4 Iteration: 2300 / 5000 [ 46%]  (Warmup) \nChain 1 Iteration: 2300 / 5000 [ 46%]  (Warmup) \nChain 3 Iteration: 2100 / 5000 [ 42%]  (Warmup) \nChain 4 Iteration: 2400 / 5000 [ 48%]  (Warmup) \nChain 2 Iteration: 2500 / 5000 [ 50%]  (Warmup) \nChain 2 Iteration: 2501 / 5000 [ 50%]  (Sampling) \nChain 1 Iteration: 2400 / 5000 [ 48%]  (Warmup) \nChain 3 Iteration: 2200 / 5000 [ 44%]  (Warmup) \nChain 4 Iteration: 2500 / 5000 [ 50%]  (Warmup) \nChain 4 Iteration: 2501 / 5000 [ 50%]  (Sampling) \nChain 1 Iteration: 2500 / 5000 [ 50%]  (Warmup) \nChain 1 Iteration: 2501 / 5000 [ 50%]  (Sampling) \nChain 3 Iteration: 2300 / 5000 [ 46%]  (Warmup) \nChain 2 Iteration: 2600 / 5000 [ 52%]  (Sampling) \nChain 3 Iteration: 2400 / 5000 [ 48%]  (Warmup) \nChain 4 Iteration: 2600 / 5000 [ 52%]  (Sampling) \nChain 1 Iteration: 2600 / 5000 [ 52%]  (Sampling) \nChain 2 Iteration: 2700 / 5000 [ 54%]  (Sampling) \nChain 3 Iteration: 2500 / 5000 [ 50%]  (Warmup) \nChain 3 Iteration: 2501 / 5000 [ 50%]  (Sampling) \nChain 4 Iteration: 2700 / 5000 [ 54%]  (Sampling) \nChain 1 Iteration: 2700 / 5000 [ 54%]  (Sampling) \nChain 2 Iteration: 2800 / 5000 [ 56%]  (Sampling) \nChain 3 Iteration: 2600 / 5000 [ 52%]  (Sampling) \nChain 4 Iteration: 2800 / 5000 [ 56%]  (Sampling) \nChain 1 Iteration: 2800 / 5000 [ 56%]  (Sampling) \nChain 2 Iteration: 2900 / 5000 [ 58%]  (Sampling) \nChain 3 Iteration: 2700 / 5000 [ 54%]  (Sampling) \nChain 4 Iteration: 2900 / 5000 [ 58%]  (Sampling) \nChain 1 Iteration: 2900 / 5000 [ 58%]  (Sampling) \nChain 2 Iteration: 3000 / 5000 [ 60%]  (Sampling) \nChain 3 Iteration: 2800 / 5000 [ 56%]  (Sampling) \nChain 4 Iteration: 3000 / 5000 [ 60%]  (Sampling) \nChain 1 Iteration: 3000 / 5000 [ 60%]  (Sampling) \nChain 2 Iteration: 3100 / 5000 [ 62%]  (Sampling) \nChain 3 Iteration: 2900 / 5000 [ 58%]  (Sampling) \nChain 4 Iteration: 3100 / 5000 [ 62%]  (Sampling) \nChain 1 Iteration: 3100 / 5000 [ 62%]  (Sampling) \nChain 2 Iteration: 3200 / 5000 [ 64%]  (Sampling) \nChain 4 Iteration: 3200 / 5000 [ 64%]  (Sampling) \nChain 3 Iteration: 3000 / 5000 [ 60%]  (Sampling) \nChain 1 Iteration: 3200 / 5000 [ 64%]  (Sampling) \nChain 2 Iteration: 3300 / 5000 [ 66%]  (Sampling) \nChain 4 Iteration: 3300 / 5000 [ 66%]  (Sampling) \nChain 3 Iteration: 3100 / 5000 [ 62%]  (Sampling) \nChain 1 Iteration: 3300 / 5000 [ 66%]  (Sampling) \nChain 2 Iteration: 3400 / 5000 [ 68%]  (Sampling) \nChain 4 Iteration: 3400 / 5000 [ 68%]  (Sampling) \nChain 3 Iteration: 3200 / 5000 [ 64%]  (Sampling) \nChain 1 Iteration: 3400 / 5000 [ 68%]  (Sampling) \nChain 2 Iteration: 3500 / 5000 [ 70%]  (Sampling) \nChain 4 Iteration: 3500 / 5000 [ 70%]  (Sampling) \nChain 3 Iteration: 3300 / 5000 [ 66%]  (Sampling) \nChain 1 Iteration: 3500 / 5000 [ 70%]  (Sampling) \nChain 2 Iteration: 3600 / 5000 [ 72%]  (Sampling) \nChain 4 Iteration: 3600 / 5000 [ 72%]  (Sampling) \nChain 3 Iteration: 3400 / 5000 [ 68%]  (Sampling) \nChain 1 Iteration: 3600 / 5000 [ 72%]  (Sampling) \nChain 2 Iteration: 3700 / 5000 [ 74%]  (Sampling) \nChain 4 Iteration: 3700 / 5000 [ 74%]  (Sampling) \nChain 3 Iteration: 3500 / 5000 [ 70%]  (Sampling) \nChain 1 Iteration: 3700 / 5000 [ 74%]  (Sampling) \nChain 4 Iteration: 3800 / 5000 [ 76%]  (Sampling) \nChain 2 Iteration: 3800 / 5000 [ 76%]  (Sampling) \nChain 3 Iteration: 3600 / 5000 [ 72%]  (Sampling) \nChain 1 Iteration: 3800 / 5000 [ 76%]  (Sampling) \nChain 4 Iteration: 3900 / 5000 [ 78%]  (Sampling) \nChain 2 Iteration: 3900 / 5000 [ 78%]  (Sampling) \nChain 3 Iteration: 3700 / 5000 [ 74%]  (Sampling) \nChain 4 Iteration: 4000 / 5000 [ 80%]  (Sampling) \nChain 1 Iteration: 3900 / 5000 [ 78%]  (Sampling) \nChain 2 Iteration: 4000 / 5000 [ 80%]  (Sampling) \nChain 3 Iteration: 3800 / 5000 [ 76%]  (Sampling) \nChain 4 Iteration: 4100 / 5000 [ 82%]  (Sampling) \nChain 1 Iteration: 4000 / 5000 [ 80%]  (Sampling) \nChain 2 Iteration: 4100 / 5000 [ 82%]  (Sampling) \nChain 3 Iteration: 3900 / 5000 [ 78%]  (Sampling) \nChain 4 Iteration: 4200 / 5000 [ 84%]  (Sampling) \nChain 1 Iteration: 4100 / 5000 [ 82%]  (Sampling) \nChain 2 Iteration: 4200 / 5000 [ 84%]  (Sampling) \nChain 3 Iteration: 4000 / 5000 [ 80%]  (Sampling) \nChain 4 Iteration: 4300 / 5000 [ 86%]  (Sampling) \nChain 1 Iteration: 4200 / 5000 [ 84%]  (Sampling) \nChain 2 Iteration: 4300 / 5000 [ 86%]  (Sampling) \nChain 3 Iteration: 4100 / 5000 [ 82%]  (Sampling) \nChain 4 Iteration: 4400 / 5000 [ 88%]  (Sampling) \nChain 1 Iteration: 4300 / 5000 [ 86%]  (Sampling) \nChain 2 Iteration: 4400 / 5000 [ 88%]  (Sampling) \nChain 3 Iteration: 4200 / 5000 [ 84%]  (Sampling) \nChain 4 Iteration: 4500 / 5000 [ 90%]  (Sampling) \nChain 1 Iteration: 4400 / 5000 [ 88%]  (Sampling) \nChain 2 Iteration: 4500 / 5000 [ 90%]  (Sampling) \nChain 3 Iteration: 4300 / 5000 [ 86%]  (Sampling) \nChain 4 Iteration: 4600 / 5000 [ 92%]  (Sampling) \nChain 1 Iteration: 4500 / 5000 [ 90%]  (Sampling) \nChain 2 Iteration: 4600 / 5000 [ 92%]  (Sampling) \nChain 3 Iteration: 4400 / 5000 [ 88%]  (Sampling) \nChain 4 Iteration: 4700 / 5000 [ 94%]  (Sampling) \nChain 1 Iteration: 4600 / 5000 [ 92%]  (Sampling) \nChain 2 Iteration: 4700 / 5000 [ 94%]  (Sampling) \nChain 3 Iteration: 4500 / 5000 [ 90%]  (Sampling) \nChain 4 Iteration: 4800 / 5000 [ 96%]  (Sampling) \nChain 1 Iteration: 4700 / 5000 [ 94%]  (Sampling) \nChain 2 Iteration: 4800 / 5000 [ 96%]  (Sampling) \nChain 3 Iteration: 4600 / 5000 [ 92%]  (Sampling) \nChain 4 Iteration: 4900 / 5000 [ 98%]  (Sampling) \nChain 1 Iteration: 4800 / 5000 [ 96%]  (Sampling) \nChain 2 Iteration: 4900 / 5000 [ 98%]  (Sampling) \nChain 3 Iteration: 4700 / 5000 [ 94%]  (Sampling) \nChain 4 Iteration: 5000 / 5000 [100%]  (Sampling) \nChain 4 finished in 95.6 seconds.\nChain 1 Iteration: 4900 / 5000 [ 98%]  (Sampling) \nChain 2 Iteration: 5000 / 5000 [100%]  (Sampling) \nChain 2 finished in 96.5 seconds.\nChain 3 Iteration: 4800 / 5000 [ 96%]  (Sampling) \nChain 1 Iteration: 5000 / 5000 [100%]  (Sampling) \nChain 1 finished in 97.8 seconds.\nChain 3 Iteration: 4900 / 5000 [ 98%]  (Sampling) \nChain 3 Iteration: 5000 / 5000 [100%]  (Sampling) \nChain 3 finished in 99.4 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 97.3 seconds.\nTotal execution time: 99.7 seconds.\n```\n\n\n:::\n:::\n\n\n\n## Model diagnostics\n\n::: columns\n\n::: {.column width=\"40%\" style=\"text-align: left;\"}\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# view trace plots\n# mcmc_plot(snap_timing_brm, type = \"trace\")\n# summary(rhat(snap_timing_brm))\nhist(rhat(snap_timing_brm))\n```\n\n::: {.cell-output-display}\n![](17-multilevel-heterogeneity_files/figure-revealjs/unnamed-chunk-10-1.png){fig-align='center' width=576}\n:::\n:::\n\n\n\n:::\n\n::: {.column width=\"60%\" style=\"text-align: left;\"}\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# summary(neff_ratio(snap_timing_brm))\nhist(neff_ratio(snap_timing_brm))\n```\n\n::: {.cell-output-display}\n![](17-multilevel-heterogeneity_files/figure-revealjs/unnamed-chunk-11-1.png){fig-align='center' width=576}\n:::\n:::\n\n\n\n:::\n:::\n\n\n## Model summary\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nprint(snap_timing_brm, digits = 3, priors = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```{style='font-size: 0.75em;'}\n Family: gamma \n  Links: mu = log; shape = log \nFormula: frame_between ~ factor(down) + play_clock_at_motion + factor(posteam_timeouts_remaining) + position + n_motion_since_line_set + factor(motion_cluster) + (1 | passer_player_id) + (1 | nflId) + (1 | defensiveTeam) \n         shape ~ (1 | passer_player_id)\n   Data: plays_snap_timing (Number of observations: 2253) \n  Draws: 4 chains, each with iter = 5000; warmup = 2500; thin = 1;\n         total post-warmup draws = 10000\n\nPriors:\nIntercept ~ student_t(3, 2.8, 2.5)\nIntercept_shape ~ student_t(3, 0, 2.5)\n<lower=0> sd ~ student_t(3, 0, 2.5)\n<lower=0> sd_shape ~ student_t(3, 0, 2.5)\n\nMultilevel Hyperparameters:\n~defensiveTeam (Number of levels: 32) \n              Estimate Est.Error l-95% CI u-95% CI  Rhat Bulk_ESS Tail_ESS\nsd(Intercept)    0.029     0.020    0.001    0.073 1.000     5050     5785\n\n~nflId (Number of levels: 356) \n              Estimate Est.Error l-95% CI u-95% CI  Rhat Bulk_ESS Tail_ESS\nsd(Intercept)    0.153     0.030    0.092    0.211 1.000     2535     3882\n\n~passer_player_id (Number of levels: 54) \n                    Estimate Est.Error l-95% CI u-95% CI  Rhat Bulk_ESS\nsd(Intercept)          0.093     0.032    0.027    0.156 1.000     2333\nsd(shape_Intercept)    0.296     0.052    0.204    0.410 1.000     3821\n                    Tail_ESS\nsd(Intercept)           2510\nsd(shape_Intercept)     5712\n\nRegression Coefficients:\n                                  Estimate Est.Error l-95% CI u-95% CI  Rhat\nIntercept                            2.411     0.131    2.158    2.671 1.000\nshape_Intercept                      0.727     0.056    0.616    0.835 1.000\nfactordown2                          0.068     0.035    0.000    0.136 1.001\nfactordown3                          0.192     0.041    0.112    0.272 1.000\nfactordown4                          0.151     0.113   -0.064    0.378 1.000\nplay_clock_at_motion                 0.029     0.003    0.022    0.035 1.001\nfactorposteam_timeouts_remaining1   -0.280     0.129   -0.538   -0.031 1.000\nfactorposteam_timeouts_remaining2   -0.144     0.113   -0.371    0.072 1.000\nfactorposteam_timeouts_remaining3   -0.152     0.109   -0.371    0.058 1.000\npositionTE                           0.530     0.065    0.403    0.659 1.000\npositionWR                           0.319     0.054    0.213    0.425 1.000\nn_motion_since_line_set             -0.021     0.032   -0.083    0.040 1.000\nfactormotion_cluster2                0.040     0.053   -0.065    0.146 1.000\nfactormotion_cluster3                0.560     0.049    0.463    0.656 1.001\nfactormotion_cluster4               -0.029     0.045   -0.116    0.060 1.001\nfactormotion_cluster5               -0.191     0.072   -0.331   -0.048 1.000\nfactormotion_cluster6                0.153     0.063    0.029    0.279 1.000\n                                  Bulk_ESS Tail_ESS\nIntercept                            12300     8765\nshape_Intercept                       7640     7421\nfactordown2                          16010     8283\nfactordown3                          15113     8269\nfactordown4                          18775     7837\nplay_clock_at_motion                 14950     7961\nfactorposteam_timeouts_remaining1    10797     8194\nfactorposteam_timeouts_remaining2    10647     7817\nfactorposteam_timeouts_remaining3    10366     7840\npositionTE                           12489     8771\npositionWR                           12038     7275\nn_motion_since_line_set              17685     8454\nfactormotion_cluster2                13937     8285\nfactormotion_cluster3                16886     8281\nfactormotion_cluster4                16113     8852\nfactormotion_cluster5                16603     8112\nfactormotion_cluster6                17650     8670\n\nDraws were sampled using sample(hmc). For each parameter, Bulk_ESS\nand Tail_ESS are effective sample size measures, and Rhat is the potential\nscale reduction factor on split chains (at convergence, Rhat = 1).\n```\n\n\n:::\n:::\n\n\n\n:::aside\nTo manually set priors, use the function [`set_prior()`](https://paulbuerkner.com/brms/reference/set_prior.html)\n:::\n\n## Posterior samples for all model parameters\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nposterior_samples <- as_tibble(snap_timing_brm)\n# names(posterior_samples) # view all parameter names\nposterior_samples\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```{style='font-size: 0.67em;'}\n# A tibble: 10,000 × 521\n   b_Intercept b_shape_Intercept b_factordown2 b_factordown3 b_factordown4\n         <dbl>             <dbl>         <dbl>         <dbl>         <dbl>\n 1        2.39             0.735       0.0758          0.164        0.120 \n 2        2.45             0.743       0.0132          0.240        0.138 \n 3        2.51             0.798       0.102           0.188        0.103 \n 4        2.53             0.769       0.0669          0.238        0.0748\n 5        2.58             0.668       0.0704          0.152        0.262 \n 6        2.40             0.694       0.0941          0.279        0.0859\n 7        2.45             0.773       0.00772         0.161        0.121 \n 8        2.64             0.724       0.0477          0.159        0.188 \n 9        2.64             0.763       0.0155          0.227       -0.0208\n10        2.26             0.764       0.0883          0.160        0.0594\n# ℹ 9,990 more rows\n# ℹ 516 more variables: b_play_clock_at_motion <dbl>,\n#   b_factorposteam_timeouts_remaining1 <dbl>,\n#   b_factorposteam_timeouts_remaining2 <dbl>,\n#   b_factorposteam_timeouts_remaining3 <dbl>, b_positionTE <dbl>,\n#   b_positionWR <dbl>, b_n_motion_since_line_set <dbl>,\n#   b_factormotion_cluster2 <dbl>, b_factormotion_cluster3 <dbl>, …\n```\n\n\n:::\n:::\n\n\n\n## Posterior distributions of sd parameters\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nposterior_samples |> \n  select(contains(\"sd_\")) # only get sd parameters\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10,000 × 4\n   sd_defensiveTeam__Intercept sd_nflId__Intercept sd_passer_player_id__Interc…¹\n                         <dbl>               <dbl>                         <dbl>\n 1                     0.0356                0.163                        0.0790\n 2                     0.0653                0.125                        0.127 \n 3                     0.0574                0.146                        0.0845\n 4                     0.00733               0.156                        0.118 \n 5                     0.0489                0.139                        0.128 \n 6                     0.00648               0.127                        0.110 \n 7                     0.0384                0.180                        0.149 \n 8                     0.0152                0.182                        0.162 \n 9                     0.0151                0.204                        0.143 \n10                     0.0212                0.168                        0.0944\n# ℹ 9,990 more rows\n# ℹ abbreviated name: ¹​sd_passer_player_id__Intercept\n# ℹ 1 more variable: sd_passer_player_id__shape_Intercept <dbl>\n```\n\n\n:::\n:::\n\n\n\n<!-- ## `tidybayes` -->\n\n<!-- ```{r} -->\n<!-- #| echo: true -->\n<!-- #| attr-output: \"style='font-size: 0.75em;'\" -->\n<!-- library(tidybayes) -->\n<!-- # get_variables(snap_timing_brm) -->\n<!-- sd_posteriors <- snap_timing_brm |>  -->\n<!--   gather_draws(sd_defensiveTeam__Intercept, -->\n<!--                sd_nflId__Intercept, -->\n<!--                sd_passer_player_id__Intercept, -->\n<!--                sd_passer_player_id__shape_Intercept) |>  -->\n<!--   mutate(.variable = str_remove(.variable, \"__Intercept|_Intercept\")) -->\n\n<!-- sd_posteriors -->\n<!-- ``` -->\n\n## Posterior distributions of sd parameters\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsd_posteriors <- posterior_samples |> \n  select(contains(\"sd_\")) |> \n  pivot_longer(everything(), \n               names_to = \"term\", \n               values_to = \"estimate\") |> \n  # remove annoying text in these parameter names\n  mutate(term = str_remove(term, \"__Intercept|_Intercept\"))\n\nsd_posteriors |>   \n  ggplot(aes(estimate, color = term)) +\n  geom_density(linewidth = 1.4) +\n  labs(x = \"Estimate\",\n       color = NULL) +\n  scale_color_manual(values = c(\"darkblue\", \"maroon\", \"darkorange\", \"black\")) +\n  theme(legend.position = \"bottom\") +\n  guides(color = guide_legend(nrow = 2))\n```\n\n::: {.cell-output-display}\n![](17-multilevel-heterogeneity_files/figure-revealjs/unnamed-chunk-15-1.png){fig-align='center' width=576}\n:::\n:::\n\n\n\n## Largest source of variation is between QBs when modeling the snap timing shape\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsd_posteriors |> \n  group_by(term) |> \n  summarize(posterior_mean = mean(estimate),\n            posterior_sd = sd(estimate),\n            lower_95_ci = quantile(estimate, 0.025),\n            upper_95_ci = quantile(estimate, 0.975))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 5\n  term                       posterior_mean posterior_sd lower_95_ci upper_95_ci\n  <chr>                               <dbl>        <dbl>       <dbl>       <dbl>\n1 sd_defensiveTeam                   0.0287       0.0197     0.00132      0.0730\n2 sd_nflId                           0.153        0.0304     0.0916       0.211 \n3 sd_passer_player_id                0.0931       0.0315     0.0273       0.156 \n4 sd_passer_player_id__shape         0.296        0.0523     0.204        0.410 \n```\n\n\n:::\n:::\n\n\n\n## Posterior distributions of $u_q$\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nposterior_samples |> \n  select(contains(\"r_passer_player_id__shape\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```{style='font-size: 0.67em;'}\n# A tibble: 10,000 × 54\n   r_passer_player_id__shape[00-…¹ r_passer_player_id__…² r_passer_player_id__…³\n                             <dbl>                  <dbl>                  <dbl>\n 1                           0.410               -0.229                  -0.330 \n 2                           0.268                0.0559                 -0.0502\n 3                           0.148               -0.175                  -0.298 \n 4                           0.149               -0.00825                -0.117 \n 5                           0.653               -0.313                  -0.370 \n 6                           0.255                0.0220                 -0.0831\n 7                           0.234               -0.198                  -0.360 \n 8                           0.349                0.0435                 -0.559 \n 9                           0.289                0.0626                 -0.114 \n10                           0.299               -0.239                  -0.249 \n# ℹ 9,990 more rows\n# ℹ abbreviated names: ¹​`r_passer_player_id__shape[00-0019596,Intercept]`,\n#   ²​`r_passer_player_id__shape[00-0023459,Intercept]`,\n#   ³​`r_passer_player_id__shape[00-0026143,Intercept]`\n# ℹ 51 more variables: `r_passer_player_id__shape[00-0026158,Intercept]` <dbl>,\n#   `r_passer_player_id__shape[00-0026498,Intercept]` <dbl>,\n#   `r_passer_player_id__shape[00-0026625,Intercept]` <dbl>, …\n```\n\n\n:::\n:::\n\n\n\n## Higher posterior mean corresponds to greater snap timing variability\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# only keep QB with at least 50 pass attempts for analysis\nqb_filtered <- plays_snap_timing |> \n  distinct(gameId, playId, passer_player_id, passer_player_name) |> \n  count(passer_player_id, passer_player_name) |>\n  filter(n >= 50)\n\nqb_shape_estimates <- posterior_samples |> \n  select(contains(\"r_passer_player_id__shape\")) |>\n  pivot_longer(everything(), names_to = \"passer_player_id\", values_to = \"estimate\") |>  \n  # clean up id column\n  mutate(passer_player_id = str_remove_all(passer_player_id, \n                                           \"r_passer_player_id__shape\\\\[|,Intercept\\\\]\")) |> \n  filter(passer_player_id %in% qb_filtered$passer_player_id) |> \n  # get player names\n  left_join(distinct(plays_snap_timing, passer_player_name, passer_player_id)) |> \n  # order players by posterior mean\n  mutate(passer_player_name = fct_reorder(passer_player_name, estimate, .fun = mean))\n\nlibrary(ggridges)\nqb_shape_estimates |> \n  ggplot(aes(estimate, passer_player_name)) +\n  geom_density_ridges(fill = \"lightgray\", rel_min_height = 0.01,\n                      quantile_lines = TRUE, quantile_fun = mean) +\n  labs(x = \"QB shape random effect\", \n       y = NULL)\n```\n\n::: {.cell-output-display}\n![](17-multilevel-heterogeneity_files/figure-revealjs/unnamed-chunk-18-1.png){fig-align='center' width=576}\n:::\n:::\n\n\n\n## Bonus: visualizing distributions with `ggdist`\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(ggdist)\nqb_shape_estimates |> \n  ggplot(aes(estimate, passer_player_name)) +\n  stat_slab(alpha = 0.4, scale = 0.95) +\n  stat_interval(alpha = 0.7) +\n  stat_summary(geom = \"point\", fun = mean, size = 0.8) +\n  scale_color_manual(values = MetBrewer::met.brewer(\"VanGogh3\"),\n                     labels = c(\"95%\", \"80%\", \"50%\")) +\n  labs(x = \"QB shape random effect\", y = NULL, color = \"Credible interval\") +\n  theme_minimal() +\n  theme(panel.grid.minor = element_blank())\n```\n\n::: {.cell-output-display}\n![](17-multilevel-heterogeneity_files/figure-revealjs/unnamed-chunk-19-1.png){fig-align='center' width=576}\n:::\n:::\n\n\n\n## Higher snap timing variability is related to facing less havoc created by the defense\n\n<br>\n\n![](https://raw.githubusercontent.com/qntkhvn/timing/refs/heads/main/figures/corr_havoc_paper.png)\n\n## Summary\n\n* We can explicitly model the variance of a response variable\n\n* `brms` makes it easy for fitting Bayesian (multilevel) models\n\n* Paper: [`arxiv.org/pdf/2502.16313`](https://arxiv.org/pdf/2502.16313)\n\n* Code: [`github.com/qntkhvn/timing`](https://github.com/qntkhvn/timing/tree/main/scripts)\n\n> For some reason that I cannot explain, I am fascinated by variability.  No, actually I can explain this: I'm a statistician. --- DMA\n\n\n<!-- # Appendix -->\n\n<!-- ## Revisiting NFL completion probability example -->\n\n<!-- $$ -->\n<!-- \\small -->\n<!-- \\begin{aligned} -->\n<!-- y_{qdri} &\\sim \\textsf{Bernoulli}(p_{qdri})\\\\ -->\n<!-- \\log \\left(\\frac{p_{qdri}}{1 - p_{qdri}}\\right) &= \\alpha_0 + \\beta_0 \\times \\textsf{air_yards}_{qdri} + u_q + v_d + w_r\\\\ -->\n<!-- u_q &\\sim \\textsf{Normal}(0, \\sigma^2_u)\\\\ -->\n<!-- v_d &\\sim \\textsf{Normal}(0, \\sigma^2_v)\\\\ -->\n<!-- w_r &\\sim \\textsf{Normal}(0, \\sigma^2_w)\\\\ -->\n<!-- \\end{aligned} -->\n<!-- $$ -->\n\n\n<!-- ## Revisiting NFL passing example -->\n\n<!-- a -->\n\n<!-- ## Uncertainty quantification with posterior distributions -->\n\n<!-- * Recall that with a frequentist approach (using `lme4`), we quantify the uncertainty of the random effect estimates using the bootstrap -->\n\n<!--   * Preserve dependence structure in the data -->\n\n<!-- * With a Bayesian approach, it naturally provides uncertainty quantification for all parameters of interest via their posterior distributions -->\n\n\n<!-- ## Uncertainty quantification with posterior distributions -->\n\n<!-- ```{r} -->\n<!-- library(brms) -->\n<!-- nfl_passing_brm <- read_rds(\"nfl_passing_brm.rds\") -->\n<!-- ``` -->\n\n<!-- ```{r} -->\n<!-- #| echo: true -->\n<!-- library(tidybayes) -->\n<!-- # get_variables(nfl_passing_brm) -->\n<!-- receiver_posterior <- nfl_passing_brm |> -->\n<!--   spread_draws(r_receiver_name_id[receiver_name_id, term]) -->\n\n<!-- top_receivers <- receiver_posterior |>  -->\n<!--   group_by(receiver_name_id) |>  -->\n<!--   summarize(mean_intercept = mean(r_receiver_name_id), .groups = \"drop\") |>  -->\n<!--   arrange(-mean_intercept) |>  -->\n<!--   slice_head(n = 10) -->\n<!-- ``` -->\n\n<!-- ## Uncertainty quantification -->\n\n<!-- ```{r} -->\n<!-- #| echo: true -->\n<!-- #| fig-width: 8 -->\n<!-- #| fig-align: \"center\" -->\n<!-- library(ggridges) -->\n<!-- receiver_posterior |>  -->\n<!--   filter(receiver_name_id %in% top_receivers$receiver_name_id) |>  -->\n<!--   mutate(receiver_name_id = factor(receiver_name_id,  -->\n<!--                                    levels = rev(top_receivers$receiver_name_id))) |>  -->\n<!--   ggplot(aes(r_receiver_name_id, receiver_name_id)) + -->\n<!--   geom_density_ridges(quantile_lines = TRUE, quantiles = 0.5, rel_min_height = 0.01) + -->\n<!--   labs(x = \"Receiver random effect\", y = NULL) -->\n<!-- ``` -->",
    "supporting": [
      "17-multilevel-heterogeneity_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}