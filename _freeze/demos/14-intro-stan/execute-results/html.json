{
  "hash": "78ad0a2ba08e64e5cebc642b8fb86970",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Lecture 15: Introduction to Stan\"\nformat: html\n---\n\n\n\n\n## Introduction\n\nThe purpose of this demo is to demonstrate how to use the [Stan probabilistic programming language](https://mc-stan.org/) in `R` with the [`rstan` package](https://mc-stan.org/rstan/index.html).\n\nPrior to proceeding through this demo, you need to install the `rstan` package. __PAY ATTENTION! This package is not installed like normal `R` packages!__ You need to follow the instructions (depending on your OS) that are [available here on GitHub](https://github.com/stan-dev/rstan/wiki/RStan-Getting-Started). In order to make sure you have `rstan` installed correctly, you should be able to run the following line of code directly in your console to fit an example Stan model. It will load up `fit`, `fit2`, `mod` and `stancode` in your environment but you can remove them after making sure code runs without any errors (note the warning messages you see are fine and expected).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexample(stan_model, package = \"rstan\", run.dontrun = TRUE)\n```\n:::\n\n\n\n\n\nIn this demo, we'll once again consider the Beta-Binomial model for Caitlin Clark's FG%. Similar to the `posterior_approx.qmd` demo, we do not need to read in any data for this demonstration.\n\n## Beta-Binomial in Stan\n\nAssuming you have the `rstan` package installed, we can proceed to write-up our first Stan model. There are three main components to each Stan model:\n\n1. `data`: you specify what type of data is used for the model, including info specifying if it's an integer, real continuous number, are there bounds, etc. For our example, the only `data` will be the number of successful FG attempts $Y$ out of $n = 85$ trials. This section will also include other relevant information about the data that we'll see in the Bayesian RAPM Stan demo.\n\n2. `parameters`: what are the parameters of the model? In this example, we only have the $\\pi$ parameter for the Binomial distribution probability of success. You'll also need to indicate the type and bounds for parameters.\n\n3. `model`: This the heart of the Stan code where you write out in code the model likelihood and prior (or more generally, the multilevel data generating process). As you'll see, the functions for the different distributions effectively look like what you see on wikipedia pages for each distribution. You have the name of the distribution with the parameter inputs.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbeta_binomial_model <- \"\n  data {\n    // set-up the data as the number of success from 0 to 85\n    int<lower = 0, upper = 85> Y;\n  }\n  parameters {\n    // define the paramter pi\n    real<lower = 0, upper = 1> pi;\n  }\n  model {\n    // now write out the data-generating process, by sampling from \n    // the Binomial model with n = 85 and then specify the prior for pi\n    Y ~ binomial(85, pi);\n    pi ~ beta(45.9, 68.7);\n  }\n\"\n```\n:::\n\n\n\n\n\nAnd now we're ready to use `rstan` for approximating the posterior via simulation. We run the `stan()` function to do this where we provide it with the `model_code`, which can be stored in a string like above or as a `.stan` file. Additionally, we need to provide the input `data` as a list with names matching the specified `data` in the model code. The remaining input relates to the Markov chains:\n\n+ `chains` tells Stan how many Markov chains to run in parallel, which is useful for speeding up the approximation. Additionally, this will be useful for diagnostics later on.\n\n+ `iter` tells Stan how long each (i.e., how many iterations) each Markov chain should. However, you'll notice in the code chunk below that `iter = 5000 * 2`. This is because, by default via the `warmup` argument, the first half of the iterations are _warmup_ or _burn-in_ samples that are ignored. The idea behind this is that the first so many steps in the chain might be unreasonable values for the parameter of interest, so we let it run for a bit before grabbing samples that are hopefully reasonable in approximating the posterior distribution. \n\n+ `seed` for making sure we can replicate the randomness of the simulation results.\n\nThe following code chunk performs a simulation with 5000 iterations across 4 Markov chains, thus resulting in a sample of 20,000 values to approximate the posterior distribution (__NOTE: this will take a few minutes to run since Stan effectively needs to compile code that is appropriate for the provided model and data__):\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rstan)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'rstan' was built under R version 4.2.3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: StanHeaders\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'StanHeaders' was built under R version 4.2.3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nrstan version 2.32.6 (Stan version 2.32.2)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nFor execution on a local, multicore CPU with excess RAM we recommend calling\noptions(mc.cores = parallel::detectCores()).\nTo avoid recompilation of unchanged Stan programs, we recommend calling\nrstan_options(auto_write = TRUE)\nFor within-chain threading using `reduce_sum()` or `map_rect()` Stan functions,\nchange `threads_per_chain` option:\nrstan_options(threads_per_chain = 1)\n```\n\n\n:::\n\n```{.r .cell-code}\nbeta_binomial_sim <- stan(model_code = beta_binomial_model, \n                          data = list(Y = 33), \n                          chains = 4, iter = 5000 * 2, \n                          seed = 2025)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nSAMPLING FOR MODEL 'anon_model' NOW (CHAIN 1).\nChain 1: \nChain 1: Gradient evaluation took 3e-06 seconds\nChain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.03 seconds.\nChain 1: Adjust your expectations accordingly!\nChain 1: \nChain 1: \nChain 1: Iteration:    1 / 10000 [  0%]  (Warmup)\nChain 1: Iteration: 1000 / 10000 [ 10%]  (Warmup)\nChain 1: Iteration: 2000 / 10000 [ 20%]  (Warmup)\nChain 1: Iteration: 3000 / 10000 [ 30%]  (Warmup)\nChain 1: Iteration: 4000 / 10000 [ 40%]  (Warmup)\nChain 1: Iteration: 5000 / 10000 [ 50%]  (Warmup)\nChain 1: Iteration: 5001 / 10000 [ 50%]  (Sampling)\nChain 1: Iteration: 6000 / 10000 [ 60%]  (Sampling)\nChain 1: Iteration: 7000 / 10000 [ 70%]  (Sampling)\nChain 1: Iteration: 8000 / 10000 [ 80%]  (Sampling)\nChain 1: Iteration: 9000 / 10000 [ 90%]  (Sampling)\nChain 1: Iteration: 10000 / 10000 [100%]  (Sampling)\nChain 1: \nChain 1:  Elapsed Time: 0.012 seconds (Warm-up)\nChain 1:                0.013 seconds (Sampling)\nChain 1:                0.025 seconds (Total)\nChain 1: \n\nSAMPLING FOR MODEL 'anon_model' NOW (CHAIN 2).\nChain 2: \nChain 2: Gradient evaluation took 0 seconds\nChain 2: 1000 transitions using 10 leapfrog steps per transition would take 0 seconds.\nChain 2: Adjust your expectations accordingly!\nChain 2: \nChain 2: \nChain 2: Iteration:    1 / 10000 [  0%]  (Warmup)\nChain 2: Iteration: 1000 / 10000 [ 10%]  (Warmup)\nChain 2: Iteration: 2000 / 10000 [ 20%]  (Warmup)\nChain 2: Iteration: 3000 / 10000 [ 30%]  (Warmup)\nChain 2: Iteration: 4000 / 10000 [ 40%]  (Warmup)\nChain 2: Iteration: 5000 / 10000 [ 50%]  (Warmup)\nChain 2: Iteration: 5001 / 10000 [ 50%]  (Sampling)\nChain 2: Iteration: 6000 / 10000 [ 60%]  (Sampling)\nChain 2: Iteration: 7000 / 10000 [ 70%]  (Sampling)\nChain 2: Iteration: 8000 / 10000 [ 80%]  (Sampling)\nChain 2: Iteration: 9000 / 10000 [ 90%]  (Sampling)\nChain 2: Iteration: 10000 / 10000 [100%]  (Sampling)\nChain 2: \nChain 2:  Elapsed Time: 0.013 seconds (Warm-up)\nChain 2:                0.014 seconds (Sampling)\nChain 2:                0.027 seconds (Total)\nChain 2: \n\nSAMPLING FOR MODEL 'anon_model' NOW (CHAIN 3).\nChain 3: \nChain 3: Gradient evaluation took 0 seconds\nChain 3: 1000 transitions using 10 leapfrog steps per transition would take 0 seconds.\nChain 3: Adjust your expectations accordingly!\nChain 3: \nChain 3: \nChain 3: Iteration:    1 / 10000 [  0%]  (Warmup)\nChain 3: Iteration: 1000 / 10000 [ 10%]  (Warmup)\nChain 3: Iteration: 2000 / 10000 [ 20%]  (Warmup)\nChain 3: Iteration: 3000 / 10000 [ 30%]  (Warmup)\nChain 3: Iteration: 4000 / 10000 [ 40%]  (Warmup)\nChain 3: Iteration: 5000 / 10000 [ 50%]  (Warmup)\nChain 3: Iteration: 5001 / 10000 [ 50%]  (Sampling)\nChain 3: Iteration: 6000 / 10000 [ 60%]  (Sampling)\nChain 3: Iteration: 7000 / 10000 [ 70%]  (Sampling)\nChain 3: Iteration: 8000 / 10000 [ 80%]  (Sampling)\nChain 3: Iteration: 9000 / 10000 [ 90%]  (Sampling)\nChain 3: Iteration: 10000 / 10000 [100%]  (Sampling)\nChain 3: \nChain 3:  Elapsed Time: 0.012 seconds (Warm-up)\nChain 3:                0.014 seconds (Sampling)\nChain 3:                0.026 seconds (Total)\nChain 3: \n\nSAMPLING FOR MODEL 'anon_model' NOW (CHAIN 4).\nChain 4: \nChain 4: Gradient evaluation took 0 seconds\nChain 4: 1000 transitions using 10 leapfrog steps per transition would take 0 seconds.\nChain 4: Adjust your expectations accordingly!\nChain 4: \nChain 4: \nChain 4: Iteration:    1 / 10000 [  0%]  (Warmup)\nChain 4: Iteration: 1000 / 10000 [ 10%]  (Warmup)\nChain 4: Iteration: 2000 / 10000 [ 20%]  (Warmup)\nChain 4: Iteration: 3000 / 10000 [ 30%]  (Warmup)\nChain 4: Iteration: 4000 / 10000 [ 40%]  (Warmup)\nChain 4: Iteration: 5000 / 10000 [ 50%]  (Warmup)\nChain 4: Iteration: 5001 / 10000 [ 50%]  (Sampling)\nChain 4: Iteration: 6000 / 10000 [ 60%]  (Sampling)\nChain 4: Iteration: 7000 / 10000 [ 70%]  (Sampling)\nChain 4: Iteration: 8000 / 10000 [ 80%]  (Sampling)\nChain 4: Iteration: 9000 / 10000 [ 90%]  (Sampling)\nChain 4: Iteration: 10000 / 10000 [100%]  (Sampling)\nChain 4: \nChain 4:  Elapsed Time: 0.013 seconds (Warm-up)\nChain 4:                0.013 seconds (Sampling)\nChain 4:                0.026 seconds (Total)\nChain 4: \n```\n\n\n:::\n:::\n\n\n\n\nThe output you see is just an overview of the four parallel Markov chains, with an indication of how long it took for reach chain to run through all iterations. Notice that Stan displays which iterations are `Warmup` (the first half for each chain) versus those used for `Sampling` from the posterior.\n\nJust for reference, the code chunk below shows how to use a `.stan` file instead of a string for the Stan model code. This file `beta_binom.stan` is available on Canvas in the demos/week9 folder. You will need to make sure the file path is correctly specified:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbeta_binomial_sim <- stan(file = \"beta_binom.stan\", \n                          data = list(Y = 33), \n                          chains = 4, iter = 5000 * 2, \n                          seed = 2024)\n```\n:::\n\n\n\n\nIn general, it is better practice write your Stan code in separate scripts since they can become quite complex (depending on your model).\n\n## Viewing the posterior simulations\n\nSimilar to the manual trace plot we created with the Metropolis-Hastings algorithm, we can create a trace plot for our Stan posterior samples. The easiest way to do this is with the [`bayesplot` package](https://mc-stan.org/bayesplot/) created by the Stan team via the `mcmc_trace()` function which creates a trace plot with lines for each of the constructed Markov chains:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(bayesplot)\n\n# Display the trace plot:\nmcmc_trace(beta_binomial_sim, \n           # What are the parameters? Just pi here\n           pars = \"pi\", \n           # Modify the size of the lines\n           size = 0.5) +\n  # I changed the color scale and modified the theme:\n  scale_color_viridis_d() +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](14-intro-stan_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n\nWe can also view the posterior distribution approximation (by combining the four chains post burn-in samples) via a couple different functions such as `mcmc_hist()`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmcmc_hist(beta_binomial_sim, pars = \"pi\") + \n  # Add y-axis back\n  yaxis_text(TRUE) + \n  ylab(\"count\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](14-intro-stan_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n\nAs well as `mcmc_dens()`, where the true posterior density is overlaid on top in red:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmcmc_dens(beta_binomial_sim, pars = \"pi\") + \n  yaxis_text(TRUE) + \n  stat_function(fun = dbeta, args = list(78.9, 120.7),\n                color = \"red\") + \n  ylab(\"density\")\n```\n\n::: {.cell-output-display}\n![](14-intro-stan_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n\nWe can see that the posterior approximation is pretty close to the true posterior density, with just a slight difference in the center relative to the true red line. Otherwise, this is a pretty solid approximation that we should feel comfortable using.\n\nWe can easily create a tidy table of the posterior sample using the `as.data.frame()` function with the parameters we want as input in `pars`. In this case, we only want the `pi` parameter (and can ignore the log-posterior values that are reported) and then turn it into a `tbl` object for ease. By default, this concatenates the samples from the four different Markov chains resulting in a complete table of 20,000 rows:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nposterior_sample <- as.data.frame(beta_binomial_sim, pars = \"pi\") |>\n  as_tibble()\n\nposterior_sample\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 20,000 × 1\n      pi\n   <dbl>\n 1 0.408\n 2 0.340\n 3 0.367\n 4 0.419\n 5 0.392\n 6 0.323\n 7 0.355\n 8 0.412\n 9 0.379\n10 0.383\n# ℹ 19,990 more rows\n```\n\n\n:::\n:::\n\n\n\n\nUsing this sample, we can proceed as before in visualizing the distribution with our own code:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nposterior_sample |>\n  ggplot(aes(x = pi)) +\n  geom_histogram(aes(y = after_stat(density))) +\n  stat_function(fun = dbeta, args = list(78.9, 120.7),\n                color = \"red\") + \n  scale_x_continuous(limits = c(0, 1)) +\n  theme_bw()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_bar()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](14-intro-stan_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n\nAnd also compute relevant quantities about the posterior distribution:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Compute various summaries of posterior sample:\nposterior_sample |> \n  summarize(posterior_mean = mean(pi), \n            posterior_median = median(pi),\n            # Convenient function for mode:\n            posterior_mode = bayesrules::sample_mode(pi),\n            # 95% credible interval:\n            lower_95 = quantile(pi, 0.025),\n            upper_95 = quantile(pi, 0.975))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 5\n  posterior_mean posterior_median posterior_mode lower_95 upper_95\n           <dbl>            <dbl>          <dbl>    <dbl>    <dbl>\n1          0.395            0.395          0.397    0.328    0.465\n```\n\n\n:::\n:::\n\n\n\n\n(You can see that the above values are slightly different than the truth that was seen in `posterior_approx.qmd`.)\n\n## Diagnostics\n\nBefore you use the posterior samples for inference tasks, you should check diagnostics to assess the quality of your posterior simulation. There are a variety of different approaches to this, and we'll cover just a small number of them in the rest of this demo.\n\nThe first thing to check is the trace plots of your Markov chains as visualized above. We want trace plots to look like random noise with no discernible patterns, such as the examples in this demo. We'll discuss problematic traces in lecture.\n\nSimilar to displaying the trace plots with lines for each Markov chain, we can also compare the distributions for each Markov chain __separately__ with overlaid densities as displayed below:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmcmc_dens_overlay(beta_binomial_sim, pars = \"pi\") +\n  scale_color_viridis_d() +\n  theme_bw()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](14-intro-stan_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n\nWe want stability across the separate chains, with each distribution appearing similar to each other. We do not observe any problems in this case, with each Markov chain displaying distributions that clearly overlap with shared characteristics. \n\nAdditionally, we can also compute the $\\hat{R}$-ratio to assess if the variability in the parameter values with all Markov chains combined is greater than the variability within each chain:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrhat(beta_binomial_sim, pars = \"pi\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1.000432\n```\n\n\n:::\n:::\n\n\n\n\nWe would be concerned if this value was noticeably larger than 1 (although 1.05 is considered the threshold for concern). The above value is close enough to 1 to indicate that __the simulation is stable__ - with consistent posterior approximations across the four chains.\n\nDespite the fact that Markov chain samples are inherently dependent on the previous value, we want them to behave like independent samples to have a better approximation of the posterior distribution. One way to assess this is with an __autocorrelation__ plot, that observes the correlation between the Markov chain values at various sized lags. We can easily view the autocorrelations for each chain using `mcmc_acf()`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmcmc_acf(beta_binomial_sim, pars = \"pi\")\n```\n\n::: {.cell-output-display}\n![](14-intro-stan_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\n\nHere we see that the autocorrelation with lag-0 is 1, which is expected since that is just comparing a value with itself. Then with lag-1 the correlation drops to 0.5, and then shortly reaches 0 by just 5 steps in the chain across the four chains. This behavior is ideal, indicating that our samples are __fast mixing__: the samples are moving around the posterior distribution quickly. \n\nIn addition to the autocorrelation plots, we can compute the __effective sample size ratio__ which is a ratio between the __effective sample size__ of the chain divided by the actual sample size:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nneff_ratio(beta_binomial_sim, pars = \"pi\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.3364141\n```\n\n\n:::\n:::\n\n\n\n\nWe would be concerned by a really low value, such as 0.1 which is considered a problematic threshold. In this case, our value is not worrisome and we would be comfortable relying on our posterior samples for inference tasks.\n\n\n\n",
    "supporting": [
      "14-intro-stan_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}