{
  "hash": "14b54e8576747452c4cc278f988cbb7a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Lecture 19: Introduction to Elo ratings\"\nformat: html\n---\n\n\n\n\n## Introduction\n\nThe purpose of this demo is walk through the basics of Elo ratings, with a simple implementation from scratch. We'll just consider a dataset containing the outcomes of NFL games from the most recent 2024-25 season, including regular season and playoffs. You can find this dataset under demos/week11 as `nfl_2425_games.csv`. The following code chunk reads in the dataset and displays the columns which are self-explanatory:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nnfl_games <- read_csv(here::here(\"data/nfl_2425_games.csv\"))\nnfl_games\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 285 × 7\n   game_id         game_type  week home_team away_team home_score away_score\n   <chr>           <chr>     <dbl> <chr>     <chr>          <dbl>      <dbl>\n 1 2024_01_BAL_KC  REG           1 KC        BAL               27         20\n 2 2024_01_GB_PHI  REG           1 PHI       GB                34         29\n 3 2024_01_PIT_ATL REG           1 ATL       PIT               10         18\n 4 2024_01_ARI_BUF REG           1 BUF       ARI               34         28\n 5 2024_01_TEN_CHI REG           1 CHI       TEN               24         17\n 6 2024_01_NE_CIN  REG           1 CIN       NE                10         16\n 7 2024_01_HOU_IND REG           1 IND       HOU               27         29\n 8 2024_01_JAX_MIA REG           1 MIA       JAX               20         17\n 9 2024_01_CAR_NO  REG           1 NO        CAR               47         10\n10 2024_01_MIN_NYG REG           1 NYG       MIN                6         28\n# ℹ 275 more rows\n```\n\n\n:::\n:::\n\n\n\n\nNote the `game_type` column indicates if the game was during the regular season (`REG`), or during the playoffs with the different values indicating the different playoff rounds:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(nfl_games$game_type)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCON DIV REG  SB  WC \n  2   4 272   1   6 \n```\n\n\n:::\n:::\n\n\n\n\nThe `week` column just increases in the correct order, which will make this process easy for us. \n\nWe’ll easily be able to use this data for generating Elo ratings over the course of the NFL season. The first step we need to take is create a column denoting whether the home team won (1), tied (0.5), or lost (0) with `mutate` and `case_when`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnfl_games <- nfl_games |>\n  mutate(game_outcome = case_when(\n    home_score > away_score ~ 1,\n    home_score == away_score ~ 0.5,\n    .default = 0\n  ))\n```\n:::\n\n\n\n\n\n## Elo rating basics\n\nWe’re going to consider the basic version of Elo ratings covered in [wikipedia](https://en.wikipedia.org/wiki/Elo_rating_system). Let the rating for the home team be $R_{\\text{home}}$ and the away team rating be $R_{\\text{away}}$. Then the __expected score__ for the home team is:\n\n$$\nE_{\\text{home}} = \\frac{1}{1+10^{\\left(R_{\\text{away}}-R_{\\text{home}}\\right) / 400}}\n$$\nand the similar quantity for the away team is:\n\n$$\nE_{\\text{away}} = \\frac{1}{1+10^{\\left(R_{\\text{home}}-R_{\\text{away}}\\right) / 400}}\n$$\n_The 400 and 10 basically determine the scaling of the ratings and can be modified, as discussed in lecture._ These expected scores represent the probability of winning plus half the probability of drawing, but for our purposes we can treat these basically as the probability of winning.\n\nWe then update the ratings for the home team if they scored $S_{\\text{home}}$ points:\n\n$$\nR^{\\text{new}}_{\\text{home}} = R_{\\text{home}} + K \\cdot (S_{\\text{home}} - E_{\\text{home}})\n$$\nwhere $K$ is known as the __update factor__. This is a __tuning parameter__, which should be selected via out-of-sample performance. For now we'll just consider $K = 20$, to represent the maximum number of Elo rating points a team gains from winning a single game. \n\nTo simplify this process, we’re going to create two helper functions to calculate both the expected score and new rating for a team given observed outcome:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncalc_expected_score <- function(team_rating, opp_team_rating) {\n  1 / (1 + 10^((opp_team_rating - team_rating) / 400))\n}\n\ncalc_new_rating <- function(team_rating, observed_score, expected_score,\n                            k_factor = 20) {\n  team_rating + k_factor * (observed_score - expected_score)\n}\n```\n:::\n\n\n\n\nThe functions are demonstrated below using an example where a team with a rating of 1400 beats a team with a rating of 1600, such that an observed score of 1 indicates a win (versus 0.5 for draw and 0 for loss):\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# First the expected score, ie win probability for the team of interest:\ncalc_expected_score(1400, 1600)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.2402531\n```\n\n\n:::\n\n```{.r .cell-code}\n# And now throw that into the calc_new_rating function:\ncalc_new_rating(1400, 1, calc_expected_score(1400, 1600))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1415.195\n```\n\n\n:::\n:::\n\n\n\n\nThe above indicates that the team with a rating of 1400 only had an estimated probability of winning at 24%, but then after beating the team with a rating of 1600 their Elo rating increases to about 1415. \n\n## Elo ratings for 2024-25 NFL season\n\nNow with the basics, let’s move on to perform these calculations over the entire season, updating our table to include each team’s Elo rating following every game. We can implement this using a for loop to proceed through each game in the `nfl_games` table, .ooking up each team’s previous ratings and performing the above calculations.\n\nPrior to beginning this loop, we will set-up a table initializing each team with a rating of 1500. This a naive approach since we likely have prior knowledge about each team's strength before the start of the season, but we'll address that later. The code chunk below initializes this starting table of ratings:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnfl_elo_ratings <- tibble(team = unique(nfl_games$home_team),\n                          elo_rating = 1500,\n                          week = 0)\nnfl_elo_ratings\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 32 × 3\n   team  elo_rating  week\n   <chr>      <dbl> <dbl>\n 1 KC          1500     0\n 2 PHI         1500     0\n 3 ATL         1500     0\n 4 BUF         1500     0\n 5 CHI         1500     0\n 6 CIN         1500     0\n 7 IND         1500     0\n 8 MIA         1500     0\n 9 NO          1500     0\n10 NYG         1500     0\n# ℹ 22 more rows\n```\n\n\n:::\n:::\n\n\n\n\nThe following code chunk proceeds to loop through and compute the ratings for each team after each game:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (game_i in 1:nrow(nfl_games)) {\n   \n  # Which teams are we looking at?\n  home_team <- nfl_games$home_team[game_i]\n  away_team <- nfl_games$away_team[game_i]\n  # What was the observed score by the home team?\n  home_score <- nfl_games$game_outcome[game_i]\n  # Week number?\n  game_week <- nfl_games$week[game_i]\n  \n  # What was each team's rating from their latest game?\n  home_rating <- nfl_elo_ratings |>\n    filter(team == home_team) |>\n    # Sort in descending order\n    arrange(desc(week)) |>\n    # Grab the latest game\n    slice(1) |>\n    # Just return the elo rating\n    pull(elo_rating)\n  \n  # Same thing for away team\n  away_rating <- nfl_elo_ratings |>\n    filter(team == away_team) |>\n    arrange(desc(week)) |>\n    slice(1) |>\n    pull(elo_rating)\n  \n  # Now get their new ratings:\n  new_home_rating <- calc_new_rating(home_rating, home_score, \n                                     calc_expected_score(home_rating, away_rating))\n  # Opposite for away team:\n  new_away_rating <- calc_new_rating(away_rating, 1 - home_score, \n                                     calc_expected_score(away_rating, home_rating))\n  \n  # Finally - join to the nfl_elo_ratings table each team's new ratings for the week:\n  updated_ratings <- tibble(team = c(home_team, away_team),\n                            elo_rating = c(new_home_rating, new_away_rating),\n                            week = rep(game_week, 2))\n  \n  nfl_elo_ratings <- nfl_elo_ratings |>\n    bind_rows(updated_ratings)\n  \n}\n```\n:::\n\n\n\n\n\nWe can view the final rating for each team pretty easily:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnfl_elo_ratings |>\n  group_by(team) |>\n  summarize(final_rating = elo_rating[which.max(week)]) |>\n  arrange(desc(final_rating))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 32 × 2\n   team  final_rating\n   <chr>        <dbl>\n 1 PHI          1626.\n 2 KC           1608.\n 3 DET          1598.\n 4 MIN          1578.\n 5 BUF          1577.\n 6 WAS          1569.\n 7 BAL          1561.\n 8 LA           1533.\n 9 GB           1531.\n10 LAC          1529.\n# ℹ 22 more rows\n```\n\n\n:::\n:::\n\n\n\n\nAnd now let's examine what these ratings look like over the course of the season:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnfl_elo_ratings |>\n  ggplot(aes(x = week, y = elo_rating, color = team)) +\n  geom_line() +\n  theme_bw() +\n  labs(x = \"Week\", y = \"Elo rating\",\n       title = \"NFL Elo ratings in 2024 season\")\n```\n\n::: {.cell-output-display}\n![](18-elo-ratings_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n\nThis is obviously an ugly plot... instead one could take advantage of the team colors available using the [`load_teams`](https://nflreadr.nflverse.com/reference/load_teams.html) function.  This is a little more involved, while I won’t walk through this code step-by-step, here is how one could highlight each division:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(nflreadr)\nnfl_team_colors <- load_teams() |>\n  dplyr::select(team_abbr, team_division, team_color)\n\n# Create a dataset that has each team's final Elo rating\nnfl_team_final <- nfl_elo_ratings |>\n  group_by(team) |>\n  summarize(week = max(week),\n            elo_rating = elo_rating[which.max(week)],\n            .groups = \"drop\") |>\n  inner_join(nfl_team_colors, by = c(\"team\" = \"team_abbr\")) |>\n  arrange(desc(elo_rating))\n \n# Need ggrepel:\nlibrary(ggrepel)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'ggrepel' was built under R version 4.2.3\n```\n\n\n:::\n\n```{.r .cell-code}\ndivision_plots <- \n  lapply(sort(unique(nfl_team_final$team_division)),\n         function(nfl_division) {                            \n             # Pull out the teams in the division\n             division_teams <- nfl_team_final |>\n               filter(team_division == nfl_division) |>\n               mutate(team = fct_reorder(team, desc(elo_rating))) \n             \n             # Get the Elo ratings data just for these teams:\n             division_data <- nfl_elo_ratings |>\n               filter(team %in% division_teams$team) |>\n               mutate(team = factor(team,\n                                    levels = levels(division_teams$team))) |>\n               # Make text labels for them:\n               group_by(team) |>\n               mutate(team_label = if_else(week == max(week),\n                                           as.character(team), \n                                           NA_character_)) |>\n               ungroup()\n             \n             # Now make the full plot\n             nfl_elo_ratings |>\n               # Plot all of the other teams as gray lines:\n               filter(!(team %in% division_teams$team)) |>\n               ggplot(aes(x = week, y = elo_rating, group = team)) +\n               geom_line(color = \"gray\", alpha = 0.5) +\n               # But display the division teams with their colors:\n               geom_line(data = division_data,\n                         aes(x = week, y = elo_rating, group = team,\n                             color = team)) +\n               geom_label_repel(data = division_data,\n                                aes(label = team_label,\n                                    color = team), nudge_x = 1, na.rm = TRUE,\n                                direction = \"y\") +\n               scale_color_manual(values = division_teams$team_color, guide = \"none\") +\n               theme_bw() +\n               labs(x = \"Week\", y = \"Elo rating\",\n                    title = paste0(\"Division: \", nfl_division)) \n         })\n# Display the grid of plots with cowplot!\nlibrary(cowplot)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'cowplot' was built under R version 4.2.3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'cowplot'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:lubridate':\n\n    stamp\n```\n\n\n:::\n\n```{.r .cell-code}\nplot_grid(plotlist = division_plots, ncol = 2, align = \"hv\")\n```\n\n::: {.cell-output-display}\n![](18-elo-ratings_files/figure-html/unnamed-chunk-10-1.png){width=768}\n:::\n:::\n\n\n\n\n\nRather than using 1500 as the initial values for every team, you could use a more informed starting point such as [Neil Paine's NFL Elo ratings](https://neilpaine.substack.com/p/2024-nfl-elo-ratings-and-projections) which start at the beginning of the league history. The code chunk below reads in this data, but I'll leave it as an exercise for you to grab the ratings at the end of the 2023-24 season to use as initial values for 2024-25:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npaine_elo_ratings <- read_csv(\"https://raw.githubusercontent.com/Neil-Paine-1/NFL-elo-ratings/main/NFL-elo-ratings.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 35898 Columns: 18\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (4): Game ID, playoff, team1, team2\ndbl  (13): season, neutral, is_home, score1, score2, elo1_pre, elo2_pre, elo...\ndate  (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\npaine_elo_ratings\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 35,898 × 18\n   `Game ID` date       season neutral is_home playoff team1 team2 score1 score2\n   <chr>     <date>      <dbl>   <dbl>   <dbl> <chr>   <chr> <chr>  <dbl>  <dbl>\n 1 19200926… 1920-09-26   1920       0       1 <NA>    RII   STP       48      0\n 2 19200926… 1920-09-26   1920       0       0 <NA>    STP   RII        0     48\n 3 19201003… 1920-10-03   1920       0       1 <NA>    AKR   WHE       43      0\n 4 19201003… 1920-10-03   1920       0       0 <NA>    WHE   AKR        0     43\n 5 19201003… 1920-10-03   1920       0       1 <NA>    BFF   WBU       32      6\n 6 19201003… 1920-10-03   1920       0       0 <NA>    WBU   BFF        6     32\n 7 19201003… 1920-10-03   1920       0       1 <NA>    CBD   PTQ       48      0\n 8 19201003… 1920-10-03   1920       0       0 <NA>    PTQ   CBD        0     48\n 9 19201003… 1920-10-03   1920       0       1 <NA>    CHI   MUT       20      0\n10 19201003… 1920-10-03   1920       0       0 <NA>    MUT   CHI        0     20\n# ℹ 35,888 more rows\n# ℹ 8 more variables: elo1_pre <dbl>, elo2_pre <dbl>, elo_prob1 <dbl>,\n#   elo_prob2 <dbl>, elo1_post <dbl>, elo2_post <dbl>, is_win <dbl>,\n#   gm_no <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n\n## Additional Resources\n\n+ Simulating NFL seasons with [`nflseedR`](https://nflseedr.com/articles/nflsim.html)\n\n+ The [`elo` package](https://eheinzen.github.io/elo/) in `R` provides convenient functions for computing Elo ratings, similar to the functions above\n\n+ Tennis Elo ratings from [tennisabstract](https://tennisabstract.com/reports/atp_elo_ratings.html)\n\n+ Also see the [Glicko rating system by the GOAT Mark Glickman](https://en.wikipedia.org/wiki/Glicko_rating_system) as well as the [TrueSkill system for videogames](https://en.wikipedia.org/wiki/TrueSkill)\n\n\n\n\n\n",
    "supporting": [
      "18-elo-ratings_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}