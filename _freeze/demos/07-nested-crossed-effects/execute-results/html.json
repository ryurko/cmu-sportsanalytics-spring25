{
  "hash": "08a69454ff2217f39a2b2911fb4c2882",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Lecture 8: Nested and crossed random effects\"\nformat: html\n---\n\n\n\n\n## Introduction\n\nThe purpose of this demo is to walk through fitting and interpreting the output of multilevel models with more than two levels, i.e., more than one group treated as random effects. Building off the previous demos and lecture content, we'll do this in the context of modeling pass completion probability. The additional levels we'll consider are the __receivers__ and __opposing defenses__. As a reminder, you can find the dataset and code to create the data (`init_nfl_passing_data.R`) on Canvas in the demos/week3 folder.  \n\nThe following code chunk reads in the relevant dataset (assuming it is in the correct directory) of passing plays:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nnfl_passing_data <- read_csv(here::here(\"data/nfl_passing_data.csv\"))\nnfl_passing_data\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 35,987 × 17\n   game_id         play_id drive posteam defteam posteam_type passer_name_id    \n   <chr>             <dbl> <dbl> <chr>   <chr>   <chr>        <chr>             \n 1 2023_01_ARI_WAS      77     1 WAS     ARI     home         S.Howell_00-00370…\n 2 2023_01_ARI_WAS     124     1 WAS     ARI     home         S.Howell_00-00370…\n 3 2023_01_ARI_WAS     147     1 WAS     ARI     home         S.Howell_00-00370…\n 4 2023_01_ARI_WAS     172     1 WAS     ARI     home         S.Howell_00-00370…\n 5 2023_01_ARI_WAS     197     1 WAS     ARI     home         S.Howell_00-00370…\n 6 2023_01_ARI_WAS     220     1 WAS     ARI     home         S.Howell_00-00370…\n 7 2023_01_ARI_WAS     332     2 ARI     WAS     away         J.Dobbs_00-0033949\n 8 2023_01_ARI_WAS     357     2 ARI     WAS     away         J.Dobbs_00-0033949\n 9 2023_01_ARI_WAS     380     2 ARI     WAS     away         J.Dobbs_00-0033949\n10 2023_01_ARI_WAS     526     3 WAS     ARI     home         S.Howell_00-00370…\n# ℹ 35,977 more rows\n# ℹ 10 more variables: receiver_name_id <chr>, complete_pass <dbl>,\n#   pass_location <chr>, air_yards <dbl>, qb_hit <dbl>, epa <dbl>,\n#   yardline_100 <dbl>, down <dbl>, ydstogo <dbl>, is_home <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n## Nested levels demonstrated by receivers\n\nIn the previous demo and lecture material, we only considered modeling the passer/QB group as a random effect. But we know that the structure of passing plays includes receivers and opposing defenses which we should also account for. \n\nTo start, we'll first consider including receivers in the model. If players did not change teams at all during the period of time we collected data, then receivers would only attempt to catch passes from a single passer/QB. This would mean that the receivers would be a __nested level__ within the passer/QB level, i.e.,  we observe the outcomes of pass attempts by QBs to a group of receivers such that their receivers do not receive any passes from other QBs. This type of data structure would correspond to a __nested three-level model__.\n\nTo make this more concrete, we'll consider a subset of our data corresponding to pass attempts that were only during the 2024 season and were attempted by the top 32 QBs in terms of the number of pass attempts that that only played for a single team. Additionally, we'll only consider receivers that caught for these QBs that only caught passes for one QB. This results in a smaller dataset that preserves the __nested__ structure we just described. The code chunk below creates this dataset:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# First get the 2024 season only:\nnfl_passing_2024 <- nfl_passing_data |>\n  filter(str_detect(game_id, \"2024_\"))\n\n# Next find the QBs and receivers that only played for one team, \nqb_list <- nfl_passing_2024 |>\n  group_by(passer_name_id) |>\n  summarize(n_teams = length(unique(posteam)),\n            n_passes = n(),\n            .groups = \"drop\") |>\n  filter(n_teams == 1) |>\n  slice_max(n_passes, n = 32) |>\n  pull(passer_name_id)\n\n# Grab the sample of passes by these QBs:\nnested_passing_data <- nfl_passing_2024 |>\n  filter(passer_name_id %in% qb_list)\n\n# Now find the receivers that only caught passes for just one QB in these plays:\nreceiver_list <- nested_passing_data |>\n  # Drop the QBs from this:\n  filter(!(receiver_name_id %in% qb_list)) |>\n  group_by(receiver_name_id) |>\n  summarize(n_qbs = length(unique(passer_name_id)),\n            .groups = \"drop\") |>\n  filter(n_qbs == 1) |>\n  pull(receiver_name_id)\n\n# And now filter the data to only these receivers:\nnested_passing_data <- nested_passing_data |>\n  filter(receiver_name_id %in% receiver_list)\n# Note this results in 31 QBs since it drops Cooper Rush for the Cowboys since\n# the Cowboys started multiple QBs this season...\n```\n:::\n\n\n\n\nUsing this dataset, we'll start with models that only contain varying intercepts. We can fit the __nested__ model in one of two ways:\n\n### 1.) Explicit nested effects\n\nThe `lme4` syntax for modeling the three level effects, with receivers nested within the passers, uses two terms: (1) the highest level intercepts `(1 | passer_name_id)`, and (2) the nested level intercepts `(1 | passer_name_id:receiver_name_id)`. The code below fits this model and displays the relevant output:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(lme4)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'lme4' was built under R version 4.2.3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: Matrix\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'Matrix' was built under R version 4.2.3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'Matrix'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:tidyr':\n\n    expand, pack, unpack\n```\n\n\n:::\n\n```{.r .cell-code}\nrec_nested_glmm <- glmer(complete_pass ~ (1 | passer_name_id) + (1 | passer_name_id:receiver_name_id),\n                         family = binomial, data = nested_passing_data)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nboundary (singular) fit: see help('isSingular')\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(rec_nested_glmm)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGeneralized linear mixed model fit by maximum likelihood (Laplace\n  Approximation) [glmerMod]\n Family: binomial  ( logit )\nFormula: \ncomplete_pass ~ (1 | passer_name_id) + (1 | passer_name_id:receiver_name_id)\n   Data: nested_passing_data\n\n     AIC      BIC   logLik deviance df.resid \n 15488.6  15510.9  -7741.3  15482.6    12738 \n\nScaled residuals: \n    Min      1Q  Median      3Q     Max \n-2.3285 -1.2747  0.5849  0.6815  0.9387 \n\nRandom effects:\n Groups                          Name        Variance Std.Dev.\n passer_name_id:receiver_name_id (Intercept) 0.1702   0.4126  \n passer_name_id                  (Intercept) 0.0000   0.0000  \nNumber of obs: 12741, groups:  \npasser_name_id:receiver_name_id, 421; passer_name_id, 31\n\nFixed effects:\n            Estimate Std. Error z value Pr(>|z|)    \n(Intercept)  0.88268    0.03281    26.9   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\noptimizer (Nelder_Mead) convergence code: 0 (OK)\nboundary (singular) fit: see help('isSingular')\n```\n\n\n:::\n:::\n\n\n\n\n\n### 2.) Implicit nested effects\n\nAn alternative way to fit the same model, __if and only if one level is completely nested within another__, is by simply specifying the two varying intercepts separately:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrec_nested_glmm2 <- glmer(complete_pass ~ (1 | passer_name_id) + (1 | receiver_name_id),\n                         family = binomial, data = nested_passing_data)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nboundary (singular) fit: see help('isSingular')\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(rec_nested_glmm2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGeneralized linear mixed model fit by maximum likelihood (Laplace\n  Approximation) [glmerMod]\n Family: binomial  ( logit )\nFormula: complete_pass ~ (1 | passer_name_id) + (1 | receiver_name_id)\n   Data: nested_passing_data\n\n     AIC      BIC   logLik deviance df.resid \n 15488.6  15510.9  -7741.3  15482.6    12738 \n\nScaled residuals: \n    Min      1Q  Median      3Q     Max \n-2.3285 -1.2747  0.5849  0.6815  0.9387 \n\nRandom effects:\n Groups           Name        Variance Std.Dev.\n receiver_name_id (Intercept) 0.1702   0.4126  \n passer_name_id   (Intercept) 0.0000   0.0000  \nNumber of obs: 12741, groups:  receiver_name_id, 421; passer_name_id, 31\n\nFixed effects:\n            Estimate Std. Error z value Pr(>|z|)    \n(Intercept)  0.88268    0.03281    26.9   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\noptimizer (Nelder_Mead) convergence code: 0 (OK)\nboundary (singular) fit: see help('isSingular')\n```\n\n\n:::\n:::\n\n\n\n\nIf you look closely at the summary output, this is the same model as before (same AIC, BIC, fixed effect estimates) including the random effects. \n\nFor both of these models, the `passer_name_id` variance is estimated to be 0, with the indication that any variance in completion probability is at the receiver level. Part of the concern of fitting this model is the fact we've approached a __boundary constraint__. Consider that the variance for the `passer_name_id` random effect is 0. This is at the __boundary__ of possible values for the variance term since variance can only be $\\geq 0$. Because this model is fit with maximum likelihood estimation via some optimization technique, this means that the best model fit is likely an impossible value for the `passer_name_id` variance (i.e., something negative). But we cannot have a negative variance value so the boundary at 0 is used instead. **The presence of a boundary constraint should be concerning to you** - it likely means that we need to re-parameterize our model (i.e., pick a different specification for it). If we did not compare about the parameters that hit the boundary, then we do not need to worry about it. In this context, I should be concerned that the variance for passers is 0.\n\nDespite these issues, we can also compute the ICC for the different random effects in this model as before:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nVarCorr(rec_nested_glmm2) |>\n  as_tibble() |>\n  # Note the use of sum(vcov) to work later with multiple levels\n  mutate(icc = vcov / (sum(vcov) + (pi^2 / 3))) |>\n  dplyr::select(grp, icc)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 2\n  grp                 icc\n  <chr>             <dbl>\n1 receiver_name_id 0.0492\n2 passer_name_id   0     \n```\n\n\n:::\n:::\n\n\n\n\nWe can also update this model to consider random slopes at both levels for `air_yards` (note this will take a bit of time to run):\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrec_air_nested_glmm <- glmer(complete_pass ~ air_yards + (air_yards | passer_name_id) + \n                               (air_yards | receiver_name_id),\n                             family = binomial, data = nested_passing_data)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nboundary (singular) fit: see help('isSingular')\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(rec_air_nested_glmm)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGeneralized linear mixed model fit by maximum likelihood (Laplace\n  Approximation) [glmerMod]\n Family: binomial  ( logit )\nFormula: \ncomplete_pass ~ air_yards + (air_yards | passer_name_id) + (air_yards |  \n    receiver_name_id)\n   Data: nested_passing_data\n\n     AIC      BIC   logLik deviance df.resid \n 14436.6  14496.2  -7210.3  14420.6    12733 \n\nScaled residuals: \n    Min      1Q  Median      3Q     Max \n-3.4281 -0.9201  0.5031  0.6104  4.1502 \n\nRandom effects:\n Groups           Name        Variance  Std.Dev. Corr \n receiver_name_id (Intercept) 6.502e-02 0.254998      \n                  air_yards   3.263e-04 0.018064 -0.78\n passer_name_id   (Intercept) 3.073e-03 0.055438      \n                  air_yards   3.906e-06 0.001976 -1.00\nNumber of obs: 12741, groups:  receiver_name_id, 421; passer_name_id, 31\n\nFixed effects:\n             Estimate Std. Error z value Pr(>|z|)    \n(Intercept)  1.414036   0.034630   40.83   <2e-16 ***\nair_yards   -0.068676   0.002636  -26.05   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nCorrelation of Fixed Effects:\n          (Intr)\nair_yards -0.694\noptimizer (Nelder_Mead) convergence code: 0 (OK)\nboundary (singular) fit: see help('isSingular')\n```\n\n\n:::\n:::\n\n\n\n\nFrom this summary, we see a few changes to the output. There are the estimates for the different parameters we've now accounted for in this more complex model such as the variances for the intercepts and `air_yards` slopes. You can see that the variance for the passer-level information is no longer 0 - meaning that there is some QB level variation explaining completion probability. However, we once again run into a boundary constraint problem! Look at the correlation for the `passer_name_id` random effects reported under the `Corr` column: it's -1. As correlation coefficients are bounded between -1 and 1, this is again another boundary estimate likely indicating the model parameterization is problematic.\n\n## Crossed effects\n\nIn the examples above, we assumed that the receivers only caught passes from one QB, and that QBs did not overlap in terms of the receivers they threw to. However, this is not true - players change teams via trades and signings such that we can observe crossing of the different levels. This is especially true over the course of multiple seasons. Furthermore, if we want to account for the opposing defense on a passing play - we know for a fact that there is no longer nesting structure since any opposing defense is not associated with a single QB/receiver group combination. Teams play several different teams throughout the course of the season. This leads to a structure that is no longer nested, but called __crossed effects__.\n\nUsing the original `nfl_passing_data` corresponding to all passing plays during the 2023 and 2024 seasons, we fit a multilevel model that accounts for air yards with varying intercepts for the QB/passer, receiver, and opposing defense using the same syntax for a single varying intercept term:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfull_pass_glmm <- glmer(complete_pass ~ air_yards + (1 | passer_name_id) +\n                          (1 | receiver_name_id) + (1 | defteam),\n                        family = binomial, data = nfl_passing_data)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in checkConv(attr(opt, \"derivs\"), opt$par, ctrl = control$checkConv, : Model is nearly unidentifiable: very large eigenvalue\n - Rescale variables?\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(full_pass_glmm)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGeneralized linear mixed model fit by maximum likelihood (Laplace\n  Approximation) [glmerMod]\n Family: binomial  ( logit )\nFormula: \ncomplete_pass ~ air_yards + (1 | passer_name_id) + (1 | receiver_name_id) +  \n    (1 | defteam)\n   Data: nfl_passing_data\n\n     AIC      BIC   logLik deviance df.resid \n 40405.5  40447.9 -20197.7  40395.5    35982 \n\nScaled residuals: \n    Min      1Q  Median      3Q     Max \n-3.2661 -0.9074  0.5001  0.6348  3.8108 \n\nRandom effects:\n Groups           Name        Variance Std.Dev.\n receiver_name_id (Intercept) 0.167115 0.40880 \n passer_name_id   (Intercept) 0.018565 0.13625 \n defteam          (Intercept) 0.003775 0.06144 \nNumber of obs: 35987, groups:  \nreceiver_name_id, 635; passer_name_id, 141; defteam, 32\n\nFixed effects:\n             Estimate Std. Error z value Pr(>|z|)    \n(Intercept)  1.225964   0.034411   35.63   <2e-16 ***\nair_yards   -0.064595   0.001353  -47.74   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nCorrelation of Fixed Effects:\n          (Intr)\nair_yards -0.298\noptimizer (Nelder_Mead) convergence code: 0 (OK)\nModel is nearly unidentifiable: very large eigenvalue\n - Rescale variables?\n```\n\n\n:::\n:::\n\n\n\n\nUsing this type of model, we can compare the different estimates of the variances to provide us with an understanding of which groups (passer vs receiver vs defense) explain more variation in the outcome. The code chunk below quickly computes the ICC value for each group term:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nVarCorr(full_pass_glmm) |>\n  as_tibble() |>\n  # Note the use of sum(vcov) to work later with multiple levels\n  mutate(icc = vcov / (sum(vcov) + (pi^2 / 3))) |>\n  dplyr::select(grp, icc)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  grp                  icc\n  <chr>              <dbl>\n1 receiver_name_id 0.0480 \n2 passer_name_id   0.00534\n3 defteam          0.00109\n```\n\n\n:::\n:::\n\n\n\n\nAccording to this model, receivers display more variance followed (by a large gap) by passers and then defense. This is not necessarily the most optimal model, but it provides a reasonable starting point for understanding the receiver-level importance in modeling completion probability. Next steps from this would be to potentially explore random slopes between the different groups and air yards, but more importantly we could account for other information (such as QB hit or the different contextual variables in the play-by-play data). I will leave that for you to explore on your own...\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}