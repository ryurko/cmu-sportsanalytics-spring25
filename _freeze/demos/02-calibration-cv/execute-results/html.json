{
  "hash": "acc22c751fc565ad1cac0c57f23dcc5c",
  "result": {
    "markdown": "---\ntitle: 'Lecture 3: Calibration and Cross-Validation'\nformat: html\n---\n\n\n## Introduction\n\nThe goal of this demo is to walk through the process of evaluating logistic regression predicted probability estimates with calibration, as well as a demonstration of implementing cross-validation. In this demo, we'll again use a dataset of NHL shot attempts during the 2023-2024 NHL season (accessed via [`hockeyR`](https://hockeyr.netlify.app/)) to evaluate an expected goals model for hockey. The following code chunk reads in the data and displays a subset of the data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nmodel_nhl_shot_data <- read_csv(here::here(\"data/model_nhl_shot_data.csv\"))\nhead(model_nhl_shot_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 11\n    game_id period shooting_player shooting_team goalie_name goalie_team x_fixed\n      <dbl>  <dbl> <chr>           <chr>         <chr>       <chr>         <dbl>\n1    2.02e9      1 Bryan Rust      Pittsburgh P… Petr Mrazek Chicago Bl…     -51\n2    2.02e9      1 Kevin Korchins… Chicago Blac… Tristan Ja… Pittsburgh…     -55\n3    2.02e9      1 Noel Acciari    Pittsburgh P… Petr Mrazek Chicago Bl…      75\n4    2.02e9      1 Wyatt Kaiser    Chicago Blac… Tristan Ja… Pittsburgh…     -39\n5    2.02e9      1 Alex Vlasic     Chicago Blac… Tristan Ja… Pittsburgh…     -36\n6    2.02e9      1 Marcus Petters… Pittsburgh P… Petr Mrazek Chicago Bl…      32\n# ℹ 4 more variables: y_fixed <dbl>, shot_distance <dbl>, shot_angle <dbl>,\n#   is_goal <dbl>\n```\n:::\n:::\n\n\n## Creating a calibration plot\n\nWe'll start with the simple logistic regression model that is just a function of shot distance (`shot_distance`):\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninit_logit <- glm(is_goal ~ shot_distance, data = model_nhl_shot_data,\n                  family = \"binomial\")\n```\n:::\n\n\nUsing this model, we can get the predicted probabilities for each shot using the `predict()` function but with `type = \"response\"` as an input (otherwise the logit values are returned):\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Add a column to the dataset with the predicted probabilities:\nmodel_nhl_shot_data <- model_nhl_shot_data |>\n  mutate(pred_prob = predict(init_logit, newdata = model_nhl_shot_data,\n                             type = \"response\"))\n```\n:::\n\n\nWe can now construct the calibration plot by binning the predicted probabilities followed by computing the proportion estimates and standard errors for each of the bins. There are a number of different ways to construct the bins, the following code represents just one way of doing this process using the `round()` function. For simplicity, we construct bins using increments of 0.05. _There are several steps here so make sure you read through the code comments!_\n\nThe following code chunk first creates a dataset with the relevant values for the calibration plot:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninit_calibration_data <- model_nhl_shot_data |>\n  # First bin the pred probs in increments of 0.05\n  mutate(bin_pred_prob = round(pred_prob / 0.05) * .05) |>\n  # Group by bin_pred_prob:\n  group_by(bin_pred_prob) |>\n  # Calculate the calibration results:\n  summarize(n_shots = n(),\n            # Observed proportion\n            bin_actual_prob = mean(is_goal),\n            # Compute the standard error based on the proportion and # shots\n            bin_se = sqrt((bin_actual_prob * (1 - bin_actual_prob)) / n_shots),\n            .groups = \"drop\") |>\n  # Cap the intervals to be within 0 and 1\n  mutate(bin_upper = pmin(bin_actual_prob + 2 * bin_se, 1),\n         bin_lower = pmax(bin_actual_prob - 2 * bin_se, 0))\ninit_calibration_data\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 6\n  bin_pred_prob n_shots bin_actual_prob   bin_se bin_upper bin_lower\n          <dbl>   <int>           <dbl>    <dbl>     <dbl>     <dbl>\n1          0      30281          0.0121 0.000629    0.0134    0.0109\n2          0.05   36884          0.0496 0.00113     0.0518    0.0473\n3          0.1    19214          0.0984 0.00215     0.103     0.0941\n4          0.15   11232          0.131  0.00319     0.138     0.125 \n5          0.2       23          0.652  0.0993      0.851     0.454 \n```\n:::\n:::\n\n\nWe can see fairly large differences in the number of shots across the bins, which leads much wider intervals. Using this dataset, we can now create a calibration plot where we include the `y = x` line as reference:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninit_calibration_data |>\n  # Display pred probs along x and actual on y\n  ggplot(aes(x = bin_pred_prob, y = bin_actual_prob)) +\n  # Display as points \n  geom_point() +\n  # Add error bars based on standard errors:\n  geom_errorbar(aes(ymin = bin_lower, ymax = bin_upper)) + \n  #geom_smooth(method = \"loess\", se = FALSE) +\n  geom_abline(slope = 1, intercept = 0, \n              color = \"black\", linetype = \"dashed\") +\n  coord_equal() + \n  scale_x_continuous(limits = c(0,1)) + \n  scale_y_continuous(limits = c(0,1)) + \n  labs(x = \"Estimated goal probability\",\n       y = \"Observed goal frequency\") + \n  theme_bw() +\n  theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](02-calibration-cv_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\nYou may also see the number of observations in each bin mapped to the size of the points, but this is effectively already accounted for via the standard error intervals:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninit_calibration_data |>\n  ggplot(aes(x = bin_pred_prob, y = bin_actual_prob)) +\n  # Display as points with number of shots mapped to size\n  geom_point(aes(size = n_shots)) +\n  geom_errorbar(aes(ymin = bin_lower, ymax = bin_upper)) + \n  geom_abline(slope = 1, intercept = 0, \n              color = \"black\", linetype = \"dashed\") +\n  coord_equal() + \n  scale_x_continuous(limits = c(0,1)) + \n  scale_y_continuous(limits = c(0,1)) + \n  labs(size = \"Number of shot attempts\",\n       x = \"Estimated goal probability\",\n       y = \"Observed goal frequency\") + \n  theme_bw() +\n  theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](02-calibration-cv_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n## Cross-validation\n\nAs discussed in lecture, an expected goals model will likely be used to generate values for new shot attempts. This means we will need to take an existing model and generate predictions on new data. The alternative idea is to constantly refit the model after every single shot (or some determined batch) but that's going to be computationally burdensome and tedious to manage. Instead, we should rely on evaluating the performance of our model based on out-of-sample performance. The most common way to do that is with $K$-fold __cross-validation__. \n\nBecause of the interesting structure of sports data, we can NOT randomly assign shots to folds. Instead, we must preserve the group structure and assign _groups of observations together_ into the folds. For instance, in this example we will __randomly assign games to folds__ thus ensuring that shots within the same game stay together. The following code chunk demonstrates how to first set-up a table containing only the game IDs, with 5-fold assignments and displays how many games are in each fold:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1979)\ngame_fold_table <- tibble(game_id = unique(model_nhl_shot_data$game_id)) |>\n  mutate(game_fold = sample(rep(1:5, length.out = n()), n()))\n\n# See how many games are in each fold:\ntable(game_fold_table$game_fold)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n  1   2   3   4   5 \n280 280 280 280 280 \n```\n:::\n:::\n\n\nNext, we need to join the fold ids to the modeling data, so that each shot is assigned to a fold based on the game assignment:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel_nhl_shot_data <- model_nhl_shot_data |> \n  left_join(game_fold_table, by = \"game_id\")\n\n# See how many shots are in each fold:\ntable(model_nhl_shot_data$game_fold)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n    1     2     3     4     5 \n19521 19754 19432 19434 19493 \n```\n:::\n:::\n\n\nAnd finally, we can generate the holdout predictions for every shot attempt by iterating through each game fold. The following code chunk represents one way of generating the cross-validation predictions, but effectively it is just looping through the test folds, fitting the model on the training data, and storing the predictions for the test data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlogit_cv_preds <- \n  map_dfr(unique(model_nhl_shot_data$game_fold), \n          function(test_fold) {\n            \n            # Separate test and training data:\n            test_data <- model_nhl_shot_data |>\n              filter(game_fold == test_fold)\n            train_data <- model_nhl_shot_data |>\n              filter(game_fold != test_fold)\n            \n            # Train model:\n            logit_model <- glm(is_goal ~ shot_distance, \n                               data = train_data, family = \"binomial\")\n            \n            # Return tibble of holdout results:\n            tibble(test_pred_probs = predict(logit_model, newdata = test_data,\n                                             type = \"response\"),\n                   test_actual = test_data$is_goal,\n                   game_fold = test_fold) \n          })\n```\n:::\n\n\nYou'll notice that the `logit_cv_preds` dataset has the same number of rows as the original model dataset. This is because **every observation receives a holdout prediction in cross-validation.**\n\nWith the cross-validation predictions, we can now create a hold-out calibration plot using the same steps as before:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlogit_cv_preds |>\n  mutate(bin_pred_prob = round(test_pred_probs / 0.05) * .05) |>\n  # Group by bin_pred_prob:\n  group_by(bin_pred_prob) |>\n  # Calculate the calibration results:\n  summarize(n_shots = n(),\n            bin_actual_prob = mean(test_actual),\n            bin_se = sqrt((bin_actual_prob * (1 - bin_actual_prob)) / n_shots),\n            .groups = \"drop\") |>\n  mutate(bin_upper = pmin(bin_actual_prob + 2 * bin_se, 1),\n         bin_lower = pmax(bin_actual_prob - 2 * bin_se, 0)) |>\n  ggplot(aes(x = bin_pred_prob, y = bin_actual_prob)) +\n  geom_point() +\n  geom_errorbar(aes(ymin = bin_lower, ymax = bin_upper)) + \n  geom_abline(slope = 1, intercept = 0, \n              color = \"black\", linetype = \"dashed\") +\n  coord_equal() + \n  scale_x_continuous(limits = c(0,1)) + \n  scale_y_continuous(limits = c(0,1)) + \n  labs(x = \"Estimated goal probability\",\n       y = \"Observed goal frequency\") + \n  theme_bw() +\n  theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](02-calibration-cv_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n**NOTE: As discussed in lecture, this is slightly different than the usual cross-validation procedure of generating an estimate for a loss (or any objective function) across $K$-folds (e.g., $K = 5$ estimates of RMSE), then averaging over the $K$-fold values to generate an estimate of the test loss with standard errors. The reason for this, is because the calibration plot itself is our desired quantity (one could hypothetically compute $K$ estimates for each bin instead).**\n\nWe can use cross-validation to compare and evaluate which set of features are more appropriate. For instance, the following code check generates the cross-validation predictions when using shot distance **AND** angle:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nangle_cv_preds <- \n  map_dfr(unique(model_nhl_shot_data$game_fold), \n          function(test_fold) {\n            \n            # Separate test and training data:\n            test_data <- model_nhl_shot_data |>\n              filter(game_fold == test_fold)\n            train_data <- model_nhl_shot_data |>\n              filter(game_fold != test_fold)\n            \n            # Train model:\n            logit_model <- glm(is_goal ~ shot_distance + shot_angle, \n                               data = train_data, family = \"binomial\")\n            \n            # Return tibble of holdout results:\n            tibble(test_pred_probs = predict(logit_model, newdata = test_data,\n                                             type = \"response\"),\n                   test_actual = test_data$is_goal,\n                   game_fold = test_fold) \n          })\n```\n:::\n\n\nWe can then stack the two datasets of predictions together, with a new column denoting what variables are in included, and then generate side-by-side calibration plots for comparison:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlogit_cv_preds |>\n  mutate(features = \"shot_distance\") |>\n  bind_rows(mutate(angle_cv_preds, features = \"shot_distance + shot_angle\")) |>\n  mutate(bin_pred_prob = round(test_pred_probs / 0.05) * .05) |>\n  # Group by features AND bin_pred_prob:\n  group_by(features, bin_pred_prob) |>\n  # Calculate the calibration results:\n  summarize(n_shots = n(),\n            bin_actual_prob = mean(test_actual),\n            bin_se = sqrt((bin_actual_prob * (1 - bin_actual_prob)) / n_shots),\n            .groups = \"drop\") |>\n  mutate(bin_upper = pmin(bin_actual_prob + 2 * bin_se, 1),\n         bin_lower = pmax(bin_actual_prob - 2 * bin_se, 0)) |>\n  ggplot(aes(x = bin_pred_prob, y = bin_actual_prob)) +\n  geom_point() +\n  geom_errorbar(aes(ymin = bin_lower, ymax = bin_upper)) + \n  geom_abline(slope = 1, intercept = 0, \n              color = \"black\", linetype = \"dashed\") +\n  # Facet by the features:\n  facet_wrap(~features, ncol = 2) +\n  coord_equal() + \n  scale_x_continuous(limits = c(0,1)) + \n  scale_y_continuous(limits = c(0,1)) + \n  labs(x = \"Estimated goal probability\",\n       y = \"Observed goal frequency\") + \n  theme_bw() +\n  theme(legend.position = \"bottom\",\n        strip.background = element_blank())\n```\n\n::: {.cell-output-display}\n![](02-calibration-cv_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n_Between these two model options, which do you think is better?_\n\n## Recap\n\n+ Introduced using calibration for evaluating logistic regression probability estimates\n\n+ Walked through steps for performing cross-validation while accounting for unique data structure\n\n",
    "supporting": [
      "02-calibration-cv_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}